<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>my first blog</title>
      <link href="/AmberZXH.github.io/2021/04/01/my-first-blog-2/"/>
      <url>/AmberZXH.github.io/2021/04/01/my-first-blog-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/AmberZXH.github.io/2021/04/01/my-first-blog-1/"/>
      <url>/AmberZXH.github.io/2021/04/01/my-first-blog-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/AmberZXH.github.io/2021/04/01/my-first-blog/"/>
      <url>/AmberZXH.github.io/2021/04/01/my-first-blog/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/AmberZXH.github.io/2021/04/01/hello-world/"/>
      <url>/AmberZXH.github.io/2021/04/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a target="_blank" rel="noopener" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a target="_blank" rel="noopener" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/AmberZXH.github.io/2021/01/13/bei-zhu/"/>
      <url>/AmberZXH.github.io/2021/01/13/bei-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-jar包和war包的介绍和区别"><a href="#1-jar包和war包的介绍和区别" class="headerlink" title="1. jar包和war包的介绍和区别"></a>1. jar包和war包的介绍和区别</h1><p>[TOC]</p><p><strong>1.jar包的介绍</strong></p><p>JAR（Java Archive，Java 归档文件）是与平台无关的文件格式，它允许将许多文件组合成一个压缩文件。<strong>JavaSE程序可以打包成Jar包</strong>(J其实可以理解为Java了)。</p><p>JAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装<strong>库</strong>、<strong>组件</strong>和<strong>插件程序</strong>，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来示工具如何处理特定的 JAR。</p><p>简单来说，jar包就是别人已经写好的一些类，然后对这些类进行打包。可以将这些jar包引入到你的项目中，可以直接使用这些jar包中的类和属性，这些jar包一般放在lib目录下。</p><p><strong>2.war包的介绍</strong></p><p>war是一个可以直接运行的web模块，通常用于网站，打成包部署到容器中。以Tomcat来说，将war包放置在其\webapps\目录下，然后启动Tomcat，这个包就会自动解压，就相当于发布了。</p><h1 id="idea我还不知道的技巧"><a href="#idea我还不知道的技巧" class="headerlink" title="idea我还不知道的技巧"></a>idea我还不知道的技巧</h1><ul><li>前段代码模版：Emmet</li><li>.sout .for不是template 而是 Postfix Completion</li></ul><h1 id="Mevan-我放在了Library里"><a href="#Mevan-我放在了Library里" class="headerlink" title="Mevan 我放在了Library里"></a>Mevan 我放在了Library里</h1><h1 id="zshrc-和-bash-profile"><a href="#zshrc-和-bash-profile" class="headerlink" title=".zshrc 和.bash_profile"></a>.zshrc 和.bash_profile</h1><p>.bash_profile是环境配置文件</p><p>.zshrc也是配置文件</p><p>terminal可以在bash和zsh相互切换</p><p>如果配置了.bash_profile配置过后不行，那就在.zshrc</p><p>最后一行添加<code>source ~/.bash_profile</code></p><h1 id="Springboot-Q1"><a href="#Springboot-Q1" class="headerlink" title="Springboot :Q1"></a>Springboot :Q1</h1><ul><li><p>选择依赖的时候如果加了数据库的依赖，启动的时候要配置好数据库，不然需要添加exclude = {DataSourceAutoConfiguration.class}</p><ul><li><p>选择以来加了Spring security 没有配置的话需要加</p></li><li><pre><code>@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class, SecurityAutoConfiguration.class})</code></pre></li></ul></li></ul><p>上面两个都加了 z x h你看得懂的奥</p><h1 id="Springboot-Q2"><a href="#Springboot-Q2" class="headerlink" title="Springboot :Q2"></a>Springboot :Q2</h1><ul><li><strong>但是如果使用@RestController注解，视图解析器InternalResourceViewResolver会失效，无法解析html、jsp页面进而跳转到指定的页面，而是返回return的内容。</strong></li></ul><h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><p>判断一个文件是不是空</p><pre><code class="java">File file =new File("xxxxxx");当一个文件夹为空 file==0当file是个文件 file==null</code></pre><h1 id="自己的Maven地址"><a href="#自己的Maven地址" class="headerlink" title="自己的Maven地址"></a>自己的Maven地址</h1><ul><li>/Library/apache-maven-3.6.3/conf/settings.xml</li><li>/Library/apache-maven-3.6.3/repository</li></ul><h1 id="HomeBrew放在哪里了"><a href="#HomeBrew放在哪里了" class="headerlink" title="HomeBrew放在哪里了"></a>HomeBrew放在哪里了</h1><p>放在了/opt/homebrew</p><h1 id="常用的FunctionalInterface"><a href="#常用的FunctionalInterface" class="headerlink" title="常用的FunctionalInterface"></a>常用的FunctionalInterface</h1><ul><li><code>Interface Suppllier</code> </li><li><code>Consumer</code><ul><li><code>Predicate</code>  做判断</li></ul></li><li><code>Function </code> 功能参数传递</li></ul><h1 id="两数相加模版"><a href="#两数相加模版" class="headerlink" title="两数相加模版"></a>两数相加模版</h1><pre><code>while ( A 没完 || B 没完)) *     A 的当前位 *     B 的当前位 * *     和 = A 的当前位 + B 的当前位 + 进位carry * *     当前位 = 和 % 10; *     进位 = 和 / 10; * * 判断还有进位吗</code></pre><h1 id="idea全局搜索"><a href="#idea全局搜索" class="headerlink" title="idea全局搜索"></a>idea全局搜索</h1><p>shifit+command+r</p><h1 id="ClassPath"><a href="#ClassPath" class="headerlink" title="ClassPath"></a>ClassPath</h1><p><strong>lasspath 等价于 main/java + main/resources + 第三方jar包的根目录</strong>。</p><h1 id="读数字字符串的算法"><a href="#读数字字符串的算法" class="headerlink" title="读数字字符串的算法"></a>读数字字符串的算法</h1><pre><code class="java"> for(int i=1;i&lt;len+1;i++){            if(i==len) //最后一个元素单独处理                sb.append(i - start).append(s.charAt(start));            else if(s.charAt(i) != s.charAt(start)){  //元素改变触发函数                sb.append(i - start).append(s.charAt(start));                start = i; //更新起始下标            }        }</code></pre><h1 id="判断是否溢出"><a href="#判断是否溢出" class="headerlink" title="判断是否溢出"></a>判断是否溢出</h1><pre><code class="java">if(res&gt;Integer.MAX_VALUE||(res==Integer.MAX_VALUE&amp;&amp;p&gt;(Integer.MAX_VALUE)%10)       return Integer.MAX_VALUE;if(res&lt;Integer.MIN_VALUE||(res==Integer.MIN_VALUE)&amp;&amp;p&gt;-(Integer.MIN_VALUE)%10)   return Integer.MIN_VALUE</code></pre><h1 id="JS属性绑定"><a href="#JS属性绑定" class="headerlink" title="JS属性绑定"></a>JS属性绑定</h1><pre><code class="html">&lt;a : href="'#/user/edit?id='+user.id" &gt; xxxx&lt;a&gt;      &lt;!-- 完整语法 --&gt;&lt;a v-bind:href="url"&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a :href="url"&gt;&lt;/a&gt;</code></pre><h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a>v-on 缩写</h3><pre><code class="html">&lt;!-- 完整语法 --&gt;&lt;a v-on:click="doSomething"&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a @click="doSomething"&gt;&lt;/a&gt;</code></pre><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><pre><code class="html">&lt;ul&gt;  &lt;template v-for="site in sites"&gt;    &lt;li&gt;{{ site.name }}&lt;/li&gt;    &lt;li&gt;--------------&lt;/li&gt;  &lt;/template&gt;&lt;/ul&gt;</code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="Date-赋值时间"><a href="#Date-赋值时间" class="headerlink" title="Date 赋值时间"></a>Date 赋值时间</h1><pre><code class="java">String dateString = "2018-02-23";        Date date= new SimpleDateFormat("yyyy-MM-dd").parse(dateString);</code></pre><h1 id="Vue初始化文件"><a href="#Vue初始化文件" class="headerlink" title="Vue初始化文件"></a>Vue初始化文件</h1><pre><code>sudo vue init webpack ${文件名}</code></pre><h1 id="vue-出现Elements-in-iteration-expect-to-have-‘v-bind-key’-directives问题"><a href="#vue-出现Elements-in-iteration-expect-to-have-‘v-bind-key’-directives问题" class="headerlink" title="vue 出现Elements in iteration expect to have ‘v-bind:key’ directives问题"></a>vue 出现Elements in iteration expect to have ‘v-bind:key’ directives问题</h1><ol><li>v-for 后添加 :key=’item’</li></ol><pre><code class="html">&lt;li v-for="i in list" :key="i"&gt;</code></pre><ol start="2"><li>在build处关闭eslint检测</li></ol><p>…(config.dev.useEslint ? [createLintingRule()] : []),</p><pre><code>//...(config.dev.useEslint ? [createLintingRule()] : []),</code></pre><h1 id="vue-v-bind"><a href="#vue-v-bind" class="headerlink" title="vue v-bind"></a>vue v-bind</h1><pre><code class="html">&lt;!-- 完整语法 --&gt;&lt;a v-bind:href="url"&gt;...&lt;/a&gt;&lt;!-- 缩写 --&gt;&lt;a :href="url"&gt;...&lt;/a&gt;&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;&lt;a :[key]="url"&gt; ... &lt;/a&gt;</code></pre><h1 id="vuecli用Element"><a href="#vuecli用Element" class="headerlink" title="vuecli用Element"></a>vuecli用Element</h1><pre><code>在项目目录下vue add element</code></pre><h1 id="tkMapper查询"><a href="#tkMapper查询" class="headerlink" title="tkMapper查询"></a>tkMapper查询</h1><pre><code class="java">        Example example=new Example(SpUser.class);        Example.Criteria criteria = example.createCriteria();        criteria.andEqualTo("username","zxh");        SpUser spUser = spUserMapper.selectOneByExample(example);        if(spUser.getPassword().equals("zxh228.."))            System.out.println("登录成功");</code></pre><h1 id="GBG配置必须这么写"><a href="#GBG配置必须这么写" class="headerlink" title="GBG配置必须这么写"></a>GBG配置必须这么写</h1><pre><code class="xml">&lt;!DOCTYPE generatorConfiguration        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt;    &lt;context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat"&gt;        &lt;property name="beginningDelimiter" value="`"/&gt;        &lt;property name="endingDelimiter" value="`"/&gt;        &lt;property name="useActualColumnNames" value="true"/&gt;        &lt;plugin type="tk.mybatis.mapper.generator.MapperPlugin"&gt;            &lt;property name="mappers" value="tk.mybatis.mapper.common.Mapper"/&gt;            &lt;property name="caseSensitive" value="true"/&gt;        &lt;/plugin&gt;        &lt;jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"                        connectionURL="jdbc:mysql://localhost:3306/travels"                        userId="root"                        password="zxh228.."&gt;            &lt;property name="serverTimezone" value="UTC"/&gt;            &lt;property name="nullCatalogMeansCurrent" value="true" /&gt;        &lt;/jdbcConnection&gt;        &lt;javaModelGenerator targetPackage="com.zxh.travels.entity"                            targetProject="src/main/java"/&gt;        &lt;sqlMapGenerator targetPackage="mapper"                         targetProject="src/main/resources"/&gt;        &lt;javaClientGenerator targetPackage="com.zxh.travels.dao"                             targetProject="src/main/java"                             type="XMLMAPPER"/&gt;        &lt;table tableName="t_user"  domainObjectName="User"&gt;            &lt;generatedKey column="id" sqlStatement="Mysql"/&gt;        &lt;/table&gt;        &lt;table tableName="t_province" domainObjectName="Province"&gt;            &lt;generatedKey column="id" sqlStatement="Mysql"/&gt;        &lt;/table&gt;        &lt;table tableName="t_place" domainObjectName="Place" &gt;            &lt;generatedKey column="id" sqlStatement="Mysql"/&gt;        &lt;/table&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h1 id="mybatis-文件配置（重要）"><a href="#mybatis-文件配置（重要）" class="headerlink" title="mybatis 文件配置（重要）"></a>mybatis 文件配置（重要）</h1><pre><code class="xml">mybatis:  mapper-locations: classpath:mapper/*.xml</code></pre><h1 id="lang-”scss”解释"><a href="#lang-”scss”解释" class="headerlink" title="lang=”scss”解释"></a>lang=”scss”解释</h1><p><a target="_blank" rel="noopener" href="https://blog.csdn.net/zhouzuoluo/article/details/81010331">https://blog.csdn.net/zhouzuoluo/article/details/81010331</a></p><h1 id="使用npm-install"><a href="#使用npm-install" class="headerlink" title="使用npm install"></a>使用npm install</h1><pre><code># 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题npm install --registry=https://registry.npm.taobao.org</code></pre><h1 id="webpack-路径中的-符号表示什么"><a href="#webpack-路径中的-符号表示什么" class="headerlink" title="[webpack] 路径中的@符号表示什么"></a>[webpack] 路径中的@符号表示什么</h1><p>在看别人使用webpack打包的项目代码时，经常会看到在路径中引用@符号，如下所示：</p><pre><code class="js">import  conOne from '@/views/conOne.vue'1</code></pre><p>这其实利用了webpack的<code>resolve.alias</code>特性，<code>webpack.config.js</code>的配制代码如下，在webpack打包时，会把路径引用中的@符号，转换为相对应的路径。</p><pre><code class="js">const path = require("path");function resolve(dir) {    return path.join(__dirname, '..', dir);}module.exports = {    resolve: {        extensions: ['*', '.js', '.vue'],        alias:{            'vue$': 'vue/dist/vue.common.js',            '@': resolve('src')        }    }}</code></pre><h1 id="bus"><a href="#bus" class="headerlink" title="bus"></a>bus</h1><h2 id="VUE使用BUS进行兄弟组件传值"><a href="#VUE使用BUS进行兄弟组件传值" class="headerlink" title="VUE使用BUS进行兄弟组件传值"></a>VUE使用BUS进行兄弟组件传值</h2><p>Posted on 2019-10-18 22:06 <a target="_blank" rel="noopener" href="https://www.cnblogs.com/luguankun/">猫头唔食鱼</a> 阅读(1869) 评论(0) <a target="_blank" rel="noopener" href="https://i.cnblogs.com/EditPosts.aspx?postid=11701121">编辑</a> <a href="javascript:void(0)">收藏</a></p><p>1.新建bus.js</p><pre><code>import Vue from 'vue'export default  new Vue</code></pre><p>2.在需要传值和接受值的vue文件中，各自引入bus.js</p><pre><code>import bus from '../util/bus'</code></pre><p>3.定义传值的方法，使用bus.$emit(‘methodName’,data), methodName是自定义的方法名</p><pre><code>&lt;button @click="trans()"&gt;传值&lt;/button&gt;methods: {    trans(){      bus.$emit('test',this.helloData)    }  },</code></pre><p>4.在要接收值的组件里，使用bus.on(‘methodName’,val =&gt;{ }) ,val 就是传过来的值</p><pre><code> mounted(){    bus.$on('test',val=&gt;{      console.log(val);      this.cdata = val    })  }</code></pre><p><strong>如果要传多个值</strong>：</p><pre><code> bus.$emit('test',data1,data2,data3……)</code></pre><p><strong>同样接收时候，需要接收多个值</strong></p><pre><code>bus.$on(test,(val,val2,val3……)=&gt;{     console.log(val,val2,val3)})</code></pre><p><strong>如果需要不触发事件，就把值传递给兄弟组件，那么必须通过异步的方法传递，例如axios或者setTimeout</strong></p><pre><code> // 不通过点击事件，把数据传递给兄弟组件，一定要setTimeout,或者axios请求     setTimeout(() =&gt; {       bus.$emit('test',data)     }, 2000);</code></pre><p>完整例子：</p><p>App.vue</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>&lt;template&gt;  &lt;div id="app"&gt;     &lt;HelloWorld/&gt;     &lt;child&gt;&lt;/child&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import HelloWorld from './components/HelloWorld'import Child from './components/Child'export default {  name: 'App',  components: {    HelloWorld,Child  }}&lt;/script&gt;</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>bus.js</p><pre><code>import Vue from 'vue'export default  new Vue</code></pre><p>子组件HelloWorld.vue</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>&lt;template&gt;&lt;div&gt;&lt;button @click="trans()"&gt;传值&lt;/button&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import bus from '../util/bus'export default {  name: "HelloWorld",  data () {    return {      helloData:"hello"    };  },  methods: {    trans(){      bus.$emit('test',this.helloData)    }  },}&lt;/script&gt;</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>子组件Child.vue</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>&lt;template&gt;&lt;div&gt;{{cdata}}&lt;/div&gt;&lt;/template&gt;&lt;script&gt;import bus from '../util/bus'export default {  name: "Child",  data () {    return {      cdata:"子数据"    };  },  mounted(){    bus.$on('test',val=&gt;{      console.log(val);      this.cdata = val    })  }}&lt;/script&gt;</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><h1 id="vue生命周期截图"><a href="#vue生命周期截图" class="headerlink" title="vue生命周期截图"></a>vue生命周期截图</h1><p>![image-20210219095549873](/Users/zhangxuhui/Library/Application Support/typora-user-images/image-20210219095549873.png)</p><h1 id="使用v-for"><a href="#使用v-for" class="headerlink" title="使用v-for"></a>使用v-for</h1><p>在vue中如果使用v-for，那一定要使用 :key ,且key是唯一值，而且key是唯一的。</p><h1 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h1><ul><li><p>父组件使用子组件</p><pre><code class="html">// 父组件 名字叫 fa&lt;div&gt;    &lt;son&gt;       // 进行插入数据        按钮    &lt;/son&gt;&lt;/div&gt;// 子组件 名字叫 son&lt;div&gt;    &lt;buttion&gt;        &lt;slot&gt;&lt;/slot&gt;    &lt;/button&gt;&lt;/div&gt;</code></pre></li></ul><p>​        结果：</p><p>![image-20210220153110528](/Users/zhangxuhui/Library/Application Support/typora-user-images/image-20210220153110528.png)</p><ul><li>具名</li></ul><pre><code>//子组件 ： (假设名为：ebutton)&lt;template&gt;  &lt;div class= 'button'&gt;      &lt;button&gt;  &lt;/button&gt;      &lt;slot name= 'one'&gt; 这就是默认值1&lt;/slot&gt;      &lt;slot name='two'&gt; 这就是默认值2 &lt;/slot&gt;      &lt;slot name='three'&gt; 这就是默认值3 &lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>​    </p><pre><code>//父组件：（引用子组件 ebutton）&lt;template&gt;  &lt;div class= 'app'&gt;     &lt;ebutton&gt;         &lt;template v-slot:one&gt; 这是插入到one插槽的内容 &lt;/template&gt;        &lt;template v-slot:two&gt; 这是插入到two插槽的内容 &lt;/template&gt;        &lt;template v-slot:three&gt; 这是插入到three插槽的内容 &lt;/template&gt;     &lt;/ebutton&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><h1 id="Teriums密码-：Zxh228…"><a href="#Teriums密码-：Zxh228…" class="headerlink" title="Teriums密码 ：Zxh228…."></a>Teriums密码 ：Zxh228….</h1><h1 id="mac创建文件"><a href="#mac创建文件" class="headerlink" title="mac创建文件"></a>mac创建文件</h1><h1 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h1><p>命令:<code>touch</code><br>笔者感觉这个命令还是挺靠谱的。Mac如果不用第三方工具（sublime等）是无法可视化创建一个<code>txt</code>文件。而用这个命令即可创建。<br>示例（创建一个test为名的txt文件）：<code>touch test.txt</code></p><h1 id="结果idea右键没有servlet"><a href="#结果idea右键没有servlet" class="headerlink" title="结果idea右键没有servlet"></a>结果idea右键没有servlet</h1><p>在x x x x x.iml中找到 sourceRoots中添加</p><pre><code>&lt;sourceRoots&gt;    &lt;root url="file://$MODULE_DIR$/src" /&gt;    &lt;root url="file://$MODULE_DIR$/src/main/java" /&gt;&lt;/sourceRoots&gt;</code></pre><h1 id="Map中好用的方法"><a href="#Map中好用的方法" class="headerlink" title="Map中好用的方法"></a>Map中好用的方法</h1><p>1.getOrDefault(key,defaultValue)</p><p>2.putIfAbsent(K key, V value) 只有在不存在key值的映射，或者映射值为null时，才将value指定的值放入到map中，否则不对Map做更改</p><pre><code class="java"> @Test    public void test3(){        Map&lt;Integer,String&gt; map = new HashMap&lt;&gt;();        map.put(1,"I");        map.put(2,"Love");        map.put(3,"you");        // map.put(5,"null");        map.putIfAbsent(1,"me");        map.putIfAbsent(4,"what");        map.putIfAbsent(5,"fuck");        map.forEach((k,v)-&gt;{            System.out.println(k+" : "+v);        });    }</code></pre><h1 id="springboot中使用jsp"><a href="#springboot中使用jsp" class="headerlink" title="springboot中使用jsp"></a>springboot中使用jsp</h1><h1 id="springboot中的一些请求参数"><a href="#springboot中的一些请求参数" class="headerlink" title="springboot中的一些请求参数"></a>springboot中的一些请求参数</h1><pre><code class="java">@GetMapping("/car/{id}/owner/{username}")public Map&lt;String,Object&gt; getCar(@PathVariable("id") Integer id,                                 @PathVariable("username") String name,                                 @PathVaribale Map&lt;String, String&gt; pv,                                 @RequestHeader("User-Agent")   String userAgent,                                 @RequestHeader Map&lt;String, String&gt; header,                                 @RequestParam("age") Integer age,                                 @Requestparam Map&lt;String,String&gt; params,                                 @RequestParam("inters") List&lt;String&gt; inters,                                 @CookieValue("_ga") String _ga,                                 @CookieValue("_ga") Cookie cookie                        )             </code></pre><h1 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h1><pre><code class="yaml">server:  port: 8989  servlet:    context-path: /shirospring:  datasource:    username: root    password: zxh228..    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/shiro    type: com.alibaba.druid.pool.DruidDataSource  application:    name: shiro  mvc:    view:      prefix: /      suffix: .jspmybatis:  mapper-locations: classpath:mapper/*.xml</code></pre><p>pom.xml</p><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.1.19&lt;/version&gt;&lt;/dependency&gt;</code></pre><h1 id="服务器公网ip"><a href="#服务器公网ip" class="headerlink" title="服务器公网ip"></a>服务器公网ip</h1><p>8.136.187.29</p><h1 id="解决json问题-map-get"><a href="#解决json问题-map-get" class="headerlink" title="解决json问题 map.get"></a>解决json问题 map.get</h1><pre><code class="java">List&lt;Specification&gt; specList = (List&lt;Specification&gt;) map.get("specList");//Object object = map.get("specList");ObjectMapper mapper = new ObjectMapper();List&lt;Specification&gt; list = mapper.convertValue(specList, new TypeReference&lt;List&lt;Specification&gt;&gt;() { });</code></pre><h1 id="JSON-Date的格式化"><a href="#JSON-Date的格式化" class="headerlink" title="JSON Date的格式化"></a>JSON Date的格式化</h1><pre><code class="java">@JsonFormat(timezone = "GMT+8",pattern = "yyyy-MM-dd HH:mm:ss")</code></pre><h1 id="Springboot-json忽略返回值为null的"><a href="#Springboot-json忽略返回值为null的" class="headerlink" title="Springboot json忽略返回值为null的"></a>Springboot json忽略返回值为null的</h1><pre><code class="xml">spring:  jackson:    default-property-inclusion: non_null</code></pre><h1 id="Springboot-获取classPath"><a href="#Springboot-获取classPath" class="headerlink" title="Springboot 获取classPath"></a>Springboot 获取classPath</h1><pre><code class="java">String filePath = ResourceUtils.getURL("classpath:").getPath()+"static/image/";</code></pre><h1 id="zsh连接服务器"><a href="#zsh连接服务器" class="headerlink" title="zsh连接服务器"></a>zsh连接服务器</h1><p><code>ssh -p 22 root@8.136.187.29</code></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
