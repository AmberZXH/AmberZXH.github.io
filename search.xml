<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计组组成原理</title>
      <link href="2021/06/23/ji-zu-xue-xi/"/>
      <url>2021/06/23/ji-zu-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="计算计组成原理"><a href="#计算计组成原理" class="headerlink" title="计算计组成原理"></a>计算计组成原理</h2><span id="more"></span><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="各种机器的表示"><a href="#各种机器的表示" class="headerlink" title="各种机器的表示"></a>各种机器的表示</h3><ul><li>反码</li></ul><p>反码就不多赘述了，很简单；</p><ul><li>移码</li></ul><p>移码，当前二进制，加上 2的 n-1 次方；</p><p>Q：为什么要使用移码？</p><p>A:    因为要使用移码来比较次方的大小，如果用传统的补码，比较比较麻烦。</p><ul><li>补码</li></ul><p>负数的补码：各位取反，末位加1；</p><p>几个特殊的补码</p><p>[-2^n-1]_补 = 2^n - 2^n-1 = 10…0 (n-1个0)（mod 2^n）</p><figure class="highlight matlab"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="number">-2</span>^n<span class="number">-1</span>]_补 = <span class="number">2</span>^n - <span class="number">2</span>^n<span class="number">-1</span> = <span class="number">10.</span>.<span class="number">.0</span> (n<span class="number">-1</span>个<span class="number">0</span>)（<span class="built_in">mod</span> <span class="number">2</span>^n）</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210721132105412.png" alt="image-20210721132105412"></p><h2 id="CPU的组成"><a href="#CPU的组成" class="headerlink" title="CPU的组成"></a>CPU的组成</h2><ul><li>控制器 </li></ul><p>负责从主存中取出指令，并确定指令类型</p><ul><li>ALU algorithm logical unit</li></ul><p>进行加法运算和逻辑与等运算的处理器</p><ul><li>寄存器组</li></ul><p>它们属于CPU内部，能被CPU高速读取</p><ol><li><p>PC 程序计数器，指向下一条将被取出执行的指令（它<code>没有任何计数器的功能</code>）</p></li><li><p>IR Instruction Register，存放当前正被执行的指令</p></li></ol><h2 id="指令执行流程"><a href="#指令执行流程" class="headerlink" title="指令执行流程"></a>指令执行流程</h2><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210714131617284.png" alt="机器指令执行过程"></p><ul><li>取指阶段<ul><li>取指令 ：去PC所指向的单元取出指令，送到指令寄存器IR，并增量PC</li><li>PC + ”1“（这里的 1 是指一个指令的长度，长度有固定的和不固定的看芯片）<ul><li>一定发生在下条指令调用之前执行完成，没有必要在一开始就执行</li><li>并且取指令，和PC+1 这个操作是可以并行执行的</li></ul></li></ul></li><li>执行阶段<ul><li>指令译码：cpu根据不同指令译码出不同的控制信号</li><li>源操作数地址计算并取操作数：根据寻址方式确定源操作数地址<ul><li>如果是存储器数据，需要一次或者多次访存</li><li>如果是间接寻址，或两操作数都在存储器中的双目运算，则需要多次访问</li><li>如果寄存器寻址，直接从寄存器中取出</li></ul></li><li>执行数据操作（进行算术/逻辑运算）：对取出来的数进行运算</li><li>目的操作数地址计算并保存结果<ul><li>（间接寻址）如果是存储器数据，需要一次或者多次访存</li><li>如果寄存器寻址，直接存储到寄存器中</li></ul></li><li>指令地址计算并将其送到PC<ul><li>顺序执行时：PC加上当前指令的长度</li><li>遇到转移类指令时：需要根据条件码，操作码和寻址方式等确定下指令地址</li></ul></li></ul></li></ul><h6 id="最终上面所有的步骤都需要进行捕获异常"><a href="#最终上面所有的步骤都需要进行捕获异常" class="headerlink" title="最终上面所有的步骤都需要进行捕获异常"></a>最终上面所有的步骤都需要进行捕获异常</h6><p>异常：溢出，越界，存错地址 之类的</p><p>中断： 外部因素中断，对中断进行处理</p>]]></content>
      
      
      
        <tags>
            
            <tag> zxh </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序（java实现</title>
      <link href="2021/05/12/dui-pai-xu-java-shi-xian/"/>
      <url>2021/05/12/dui-pai-xu-java-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="堆排序的应用和实现"><a href="#堆排序的应用和实现" class="headerlink" title="堆排序的应用和实现"></a>堆排序的应用和实现</h1><span id="more"></span><h2 id="堆是什么？为什么要使用堆？"><a href="#堆是什么？为什么要使用堆？" class="headerlink" title="堆是什么？为什么要使用堆？"></a>堆是什么？为什么要使用堆？</h2><p>堆是以数组的形式进行维护的。</p><p>呈现出一棵完全二叉树</p><p>例如 ：Root 节点的 下标为 1  ；</p><p>​            Left 节点的下标为 2 （ root * 2）；</p><p>​          Right 节点的下标为3；（root * 2 +1）</p><p><code>关键</code>： 动态</p><p>时间复杂度 ： NlogM</p><h3 id="使用堆实现优先队列"><a href="#使用堆实现优先队列" class="headerlink" title="使用堆实现优先队列"></a>使用堆实现优先队列</h3><p>什么是优先队列呢？</p><p>根据队列元素的优先级进行排序的队列</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式的用法总结</title>
      <link href="2021/05/05/lambda-biao-da-shi-de-yong-fa-zong-jie/"/>
      <url>2021/05/05/lambda-biao-da-shi-de-yong-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda表达式的使用"><a href="#Lambda表达式的使用" class="headerlink" title="Lambda表达式的使用"></a>Lambda表达式的使用</h1><span id="more"></span><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/AWS-Lambda-libreri%CC%81as-y-binarios-Morris-Opazo.jpeg" alt="AWS-Lambda-librerías-y-binarios-Morris-Opazo"></p><h2 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法"></a>map()方法</h2><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section"># 使用 map 重构 Collection<span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span></span></span></span><br><span class="line">   result.stream().map(t-&gt;{</span><br><span class="line">   ...写自己的逻辑</span><br><span class="line">   return 结果（将每一项的结果改变）</span><br><span class="line">   }).collect(Collectors.toList);</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><h2 id="distinct-的替代"><a href="#distinct-的替代" class="headerlink" title="distinct()的替代"></a>distinct()的替代</h2><figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section"># 使用filter + 自定义方法 替代 distinct（）</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 自定义方法</span></span><br><span class="line"><span class="code">    public static&lt;T&gt; Predicate&lt;T&gt; distinctByKey(Function&lt;? super T, Object&gt; keyExtractor){</span></span><br><span class="line"><span class="code">   Map&lt;Object,Boolean&gt; seen = new ConcurrentHashMap&lt;&gt;();</span></span><br><span class="line"><span class="code">   return object -&gt; seen.putIfAbsent(keyExtractor.apply(object), Boolean.TRUE) == null;</span></span><br><span class="line"><span class="code">   }</span></span><br><span class="line"><span class="code">   </span></span><br><span class="line"><span class="code">### 实际用法（根据user的name 去重）</span></span><br><span class="line"><span class="code">   result.stream().filter(User::getName).....</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试复习-Java基础</title>
      <link href="2021/05/05/mian-shi-fu-xi-java-ji-chu/"/>
      <url>2021/05/05/mian-shi-fu-xi-java-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><span id="more"></span><h2 id="基础概念与常识"><a href="#基础概念与常识" class="headerlink" title="基础概念与常识"></a>基础概念与常识</h2><h3 id="Java-语言有哪些特点"><a href="#Java-语言有哪些特点" class="headerlink" title="Java 语言有哪些特点"></a>Java 语言有哪些特点</h3><blockquote><p>面向对象（继承，多态，封装），平台无关性，支持多线程</p></blockquote><hr><h3 id="JVM-vs-JDK-vs-JRE"><a href="#JVM-vs-JDK-vs-JRE" class="headerlink" title="JVM vs JDK vs JRE"></a>JVM vs JDK vs JRE</h3><h4 id="什么是-JVM？"><a href="#什么是-JVM？" class="headerlink" title="什么是 JVM？"></a>什么是 JVM？</h4><blockquote><p>Java Virtual Machine 虚拟机，进行对象内存管理的平台，针对不同系统的特定实现，目的是使用相同的字节码，都会给出相同的结果</p></blockquote><h4 id="什么是字节码？"><a href="#什么是字节码？" class="headerlink" title="什么是字节码？"></a>什么是字节码？</h4><blockquote><p>扩展名为 .class 的文件</p></blockquote><p>![Java程序运行步骤](/Users/zhangxuhui/Library/Application Support/typora-user-images/image-20210505134830133.png)</p><h4 id="什么是-JDK？"><a href="#什么是-JDK？" class="headerlink" title="什么是 JDK？"></a>什么是 JDK？</h4><blockquote><p>Java 程序运行需要的依赖，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。</p></blockquote><h4 id="什么是JRE-？"><a href="#什么是JRE-？" class="headerlink" title="什么是JRE ？"></a>什么是JRE ？</h4><blockquote><p>JDK 的低配版本，是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。</p></blockquote><hr><h3 id="为什么说-Java-语言”编译与解释并存”？"><a href="#为什么说-Java-语言”编译与解释并存”？" class="headerlink" title="为什么说 Java 语言”编译与解释并存”？"></a>为什么说 Java 语言”编译与解释并存”？</h3><p>感觉不会问，先忽略</p><hr><h3 id="Oracle-JDK-和-OpenJDK-的对比"><a href="#Oracle-JDK-和-OpenJDK-的对比" class="headerlink" title="Oracle JDK 和 OpenJDK 的对比"></a>Oracle JDK 和 OpenJDK 的对比</h3><p>感觉不会问，先忽略</p><hr><h3 id="Java-和-C-的区别"><a href="#Java-和-C-的区别" class="headerlink" title="Java 和 C ++ 的区别"></a>Java 和 C ++ 的区别</h3><p>感觉不会问，先忽略</p><hr><h3 id="Import-Java-和-javax-有什么区别"><a href="#Import-Java-和-javax-有什么区别" class="headerlink" title="Import Java 和 javax 有什么区别"></a>Import Java 和 javax 有什么区别</h3><blockquote><p>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。</p><p>所以，实际上 java 和 javax 没有区别。这都是一个名字。</p></blockquote><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="java-中的基本数据类型"><a href="#java-中的基本数据类型" class="headerlink" title="java 中的基本数据类型"></a>java 中的基本数据类型</h3><blockquote><p>java 要确定每种基本类型所占存储空间的大小。他们的大小并不像其他大多数语言那样随机器硬件架构的变化而变化。这种占存储空间大小的不变性是Java程序比用其他大多数语言编写的程序更具可移植性的原因之一。</p></blockquote><p>![基本数据类型](/Users/zhangxuhui/Library/Application Support/typora-user-images/image-20210505135743767.png)</p><h2 id="HashMap-和-HashTable-的区别"><a href="#HashMap-和-HashTable-的区别" class="headerlink" title="HashMap 和 HashTable 的区别"></a>HashMap 和 HashTable 的区别</h2><blockquote><p>HashMap 和 HashTable 实现方法基本都是差不多的，但是 HashTable 里的方法基本上都加了 synchronized 关键字。</p><p>当作为共享变量时，在多线程环境下使用HashMap 和多线程环境下使用 HashMap 的结果可能是不一样的。</p><p>但我们也基本不用HashTable ，效率太低，基本都用 concurrentHashMap </p><p>HashMap 可以允许 key 和 value 为 null ，HashTable 是不允许的。</p></blockquote><h3 id="底层实现：数组-链表"><a href="#底层实现：数组-链表" class="headerlink" title="底层实现：数组+链表"></a>底层实现：数组+链表</h3><blockquote><p>Jdk8 开始链表高度达到8，数组长度超过64，链表转化为红黑树，元素以内部类Node 节点存在</p><ul><li>插入数据的过程<ul><li>计算 K 的 hash 值 ，二次 hash 然后对数组长度取模，得到对应的数组下标<ul><li>如果取到的下标 没有产生 hash 冲突（下标位置没有元素），则直接创建 Node 插入</li><li>如果取到的下标 产生了 hahs 冲突，先进行 equals 比较，这里如果没有重写 equals 方法，默认是“==”，重写了就按照你自己的逻辑来比较。如果 equals 的结果 是true 那就覆盖，结果是 false ，则判断链表的高度插入链表<ul><li>（链表高度到8转化成红黑树，并且数组长度到64则转变为红黑树，长度低于6则将红黑树转会链表）</li></ul></li></ul></li><li>当 K 为 null 时，将数据存储在下标为 0 到位置</li></ul></li><li>数组扩容<ul><li>当数组满了，那么就 new 一个新的数组，将原来的数组 copy 进去，数组的扩容长度根据扩容因子而来。</li></ul></li></ul></blockquote><h3 id="ConcurrentHashMap原理"><a href="#ConcurrentHashMap原理" class="headerlink" title="ConcurrentHashMap原理"></a>ConcurrentHashMap原理</h3><blockquote><ul><li><p>jdk7 </p><ul><li>数据结构：ReentrantLocl + Segment + HashEntry ， 一个 Segment 中包含一个 HashEntry 数组，每个 HashEntry 又是一个链表结构</li></ul><p>这个HashEntry有点类似于 HashMap </p><ul><li>锁 ：Segment 分段锁，顾名思义，就像是把一整大段大东西分成小段，每一个小段都是独立，都拥有自己的一把锁，只锁定自己的一个段，锁的力度要小一点，所以效率高一点。</li><li>扩容： 扩容的时候，只扩容当前的segment</li><li>并发度： 为 segment 的个数</li><li>元素查询：进行两次 hash<ul><li>第一次 hash：定位到哪一个segment</li><li>第二次 hash：定位到元素所在的链表的头部（segment 内部是类似于 HashMap的结构，也就是要找到数组的下标）</li></ul></li><li>元素：也是通过 Node 来存储的，Val 是通过 volatile 修饰的 从而保证了可见性。</li></ul></li><li><p>jdk8</p><ul><li>数据结构：synchronized + CAS（乐观锁）+ Node + 红黑树，Node 的 val 和 next 都用 volatile 修饰，保证可见性</li><li>CAS(Compare And Swap)：被认为是一种乐观锁,乐观锁，会以一种更加乐观的态度对待事情，认为自己可以操作成功。当多个线程操作同一个共享资源时，仅能有一个线程同一时间获得锁成功，在乐观锁中，其他线程发现自己无法成功获得锁，并不会像悲观锁那样阻塞线程，而是直接返回，可以去选择再次重试获得锁，也可以直接退出.</li><li>锁：锁链表的 head 节点，不影响其他元素读写，锁粒度更细，效率更高。</li><li>扩容：阻塞所有的读写操作、并发扩容</li><li>读操作无锁：Node 的 val 和 next 都用 volatile 修饰，保证可见性，不会读到脏数据，数组用 volatile 修饰，保证扩容时被读线程感知。</li></ul></li></ul></blockquote><hr><h2 id="如何实现一个-IOC-容器？"><a href="#如何实现一个-IOC-容器？" class="headerlink" title="如何实现一个 IOC 容器？"></a>如何实现一个 IOC 容器？</h2><blockquote><ul><li>配置文件中指定需要扫描的包路径</li><li>定义一些注解，分别表示访问控制层、业务服务层、数据持久层、依赖注入注解、获取配置文件注解</li><li>从配置文件中获取需要扫描的包路径，获取到当前路径下的文件信息及文件夹信息，我们将当前路径下所有以.class 结尾的文件添加到一个Set集合中进行存储</li><li>遍历这个set 集合，获取在类上有指定注解到类，并将其交给IOC容器，定义一个安全的Map用来存储这些对象</li><li>遍历这个IOC 容器，获取每一个类的实例，判断里面是有依赖其他的类的实例，然后进行递归注入</li></ul></blockquote><h2 id="Java中有哪些类加载器？"><a href="#Java中有哪些类加载器？" class="headerlink" title="Java中有哪些类加载器？"></a>Java中有哪些类加载器？</h2><blockquote><ul><li>bootstrap ClassLoader：<ul><li>是<code>ExtClassLoader</code>的父类加载器，并不是继承关系，都是通过一个parent 变量去维护的，并不是真的继承。默认负责加载%<code>JAVA_HOME</code>%lib 下的jar包和class 文件</li></ul></li><li>ExtClassLoader：<ul><li>是<code>AppClassLoader</code> 的父类加载器，也不是在真正的继承关系。负责加载%JAVA_HOME%/lib/ext 文件夹下的jar包和class 类。</li></ul></li><li>AppClassLoader<ul><li>是自定义类加载器的父类，负责加载 <code>classpath</code> 下的类文件</li></ul></li><li>自定义类加载器<ul><li>继承 <code>ClassLoader</code> 实现自定义类加载器</li></ul></li><li>线程上下文加载器<ul><li>上述的加载器都可以访问 <code>线程上下文加载器</code></li></ul></li></ul></blockquote><h2 id="什么是双亲委派？"><a href="#什么是双亲委派？" class="headerlink" title="什么是双亲委派？"></a>什么是双亲委派？</h2><blockquote><ul><li>向上委派：<ul><li>实际上就是类加载器要去加载一个类的时候，它不会直接去加载，而是先去上层的类加载器的缓存中查找，是否加载了该类，有则直接返回，没有继续向上。  </li></ul></li><li>向下查找：当向上委派到最顶层的时候，还是有没有找到的话，则会去<code>加载路径</code>中查找，有则加载返回，没有则向下查找。</li><li>Tips：<ul><li>向上委派到顶层加载器为止，向下查找到发起加载到加载器停止为止</li><li>如果双亲委派没有找到的话，那么发起加载的类加载器，就会报类找不到的异常错误</li></ul></li></ul></blockquote><p>![双亲委派模型](/Users/zhangxuhui/Library/Application Support/typora-user-images/image-20210506141622401.png)</p><h3 id="双亲委派模型的好处？"><a href="#双亲委派模型的好处？" class="headerlink" title="双亲委派模型的好处？"></a>双亲委派模型的好处？</h3><blockquote><ul><li>主要是为了安全性，避免程序员自己编写的类动态替换掉 java 的一些核心类，举个例子：当你自定义了一个 String 类，你要去加载它，通过向上委派机制，它会在 Bootstrap ClassLoader 中找到 Java 自带的 String ，而不会加载程序员自定义的 String</li><li>同时也避免了类的重复加载，因为 jvm 中区分不同类，不仅仅是根据类名，相同的class文件被不同的 ClassLoader 加载就是不同的两个类。</li></ul></blockquote><hr><h2 id="Java-中的异常体系？"><a href="#Java-中的异常体系？" class="headerlink" title="Java 中的异常体系？"></a>Java 中的异常体系？</h2><p>粒度蛮粗的体系</p><p>![简单异常体系](/Users/zhangxuhui/Library/Application Support/typora-user-images/image-20210506144601229.png)</p><h2 id="GC-如何判断对象可以被回收"><a href="#GC-如何判断对象可以被回收" class="headerlink" title="GC 如何判断对象可以被回收"></a>GC 如何判断对象可以被回收</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap面试题</title>
      <link href="2021/04/29/hashmap-mian-shi-ti/"/>
      <url>2021/04/29/hashmap-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac安装rocketMQ</title>
      <link href="2021/04/23/mac-an-zhuang-rocketmq/"/>
      <url>2021/04/23/mac-an-zhuang-rocketmq/</url>
      
        <content type="html"><![CDATA[<h1 id="安装rocketMq-4-4"><a href="#安装rocketMq-4-4" class="headerlink" title="安装rocketMq-4.4"></a>安装rocketMq-4.4</h1><span id="more"></span><p>本意是要安装最新的，为了适配项目不得已而为之</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-到官网下载解压"><a href="#1-到官网下载解压" class="headerlink" title="1 到官网下载解压"></a>1 到官网下载解压</h3><p>官网地址：<a target="_blank" rel="noopener" href="http://rocketmq.apache.org/dowloading/releases/">http://rocketmq.apache.org/dowloading/releases/</a></p><p>解压： <img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423202917917.png" alt="解压"></p><h3 id="2-配置环境？"><a href="#2-配置环境？" class="headerlink" title="2 配置环境？"></a>2 配置环境？</h3><p>mac 需要配置环境？ 不晓得哦</p><p>应该是要配置 JAVA_HOME ， 它要依赖 <code>java</code> 的</p><h4 id="2-1-修改-runbroker-sh"><a href="#2-1-修改-runbroker-sh" class="headerlink" title="2.1 修改 runbroker.sh"></a>2.1 修改 runbroker.sh</h4><p>![runbroker.sh  修改前](/Users/zhangxuhui/Library/Application Support/typora-user-images/image-20210423204619519.png)</p><blockquote><ul><li>Xms :  指程序启动时的内存大小 （此值可以设置成与 -Xmx 相同，以避免每次 GC 完成后 JVM内存重新分配）</li><li>Xmx ：指程序运行时最大可用内存大小，程序运行中内存大于这个值会 OutOfMemory</li><li>Xmn : 年轻代大小 （整个JVM内存大小 = 年轻代 + 老年代 + 永久代）</li></ul></blockquote><p>修改为：</p><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423205919828.png" alt="runbroker.sh 修改后"></p><h4 id="2-3-修改-runserver-sh"><a href="#2-3-修改-runserver-sh" class="headerlink" title="2.3 修改 runserver.sh"></a>2.3 修改 runserver.sh</h4><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423210743957.png" alt="runserver.sh 修改后"></p><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3 启动"></a>3 启动</h3><h4 id="3-1-启动-nameser"><a href="#3-1-启动-nameser" class="headerlink" title="3.1 启动 nameser"></a>3.1 启动 nameser</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></tbody></table></figure><h4 id="3-2-启动-broker"><a href="#3-2-启动-broker" class="headerlink" title="3.2 启动 broker"></a>3.2 启动 broker</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">nohup sh mqbroker -n 127.0.0.1:9876 autoCreateTopicEnable=true &amp;</span><br></pre></td></tr></tbody></table></figure><p>这里有个坑，不要写 <code>localhost</code> 尽量都写 <code>127.0.0.1</code></p><h4 id="3-3-查看运行状态"><a href="#3-3-查看运行状态" class="headerlink" title="3.3 查看运行状态"></a>3.3 查看运行状态</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">21:37:42 with zhangxuhui in local/rocketmq-4.4.0/bin</span><br><span class="line">✦2 ➜ jps</span><br><span class="line">42513 Jps</span><br><span class="line">32353 GatewayApplication</span><br><span class="line">42468 BrokerStartup</span><br><span class="line">42379 NamesrvStartup</span><br></pre></td></tr></tbody></table></figure><p>启动成功</p><h4 id="3-4-查询启动日志"><a href="#3-4-查询启动日志" class="headerlink" title="3.4 查询启动日志"></a>3.4 查询启动日志</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423214400112.png" alt="namesrv日志查询"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423214419764.png" alt="broker日志查询"></p><h4 id="3-5-关闭服务"><a href="#3-5-关闭服务" class="headerlink" title="3.5 关闭服务"></a>3.5 关闭服务</h4><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mqshutdown broker  //停止 broker</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423215013634.png"></p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mqshutdown namesrv //停止 nameserver</span><br></pre></td></tr></tbody></table></figure><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423215449737.png"></p><h2 id="整合springboot"><a href="#整合springboot" class="headerlink" title="整合springboot"></a>整合springboot</h2><h3 id="1-1项目结构"><a href="#1-1项目结构" class="headerlink" title="1.1项目结构"></a>1.1项目结构</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210424160248187.png" alt="项目结构"></p><h3 id="2-2-需要的依赖"><a href="#2-2-需要的依赖" class="headerlink" title="2.2 需要的依赖"></a>2.2 需要的依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-详细文件"><a href="#3-3-详细文件" class="headerlink" title="3.3 详细文件"></a>3.3 详细文件</h3><p><code>provider.java</code></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxh.rocketmq;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQBrokerException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.remoting.exception.RemotingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: AmberZxh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2021/4/24 10:07 上午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">provider</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException </span>{</span><br><span class="line">        <span class="comment">// instantiate with a producer group name</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"zxh-group"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// specify nameServer address</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// launch the producer</span></span><br><span class="line"></span><br><span class="line">        producer.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create a message instance,specifying topic,and message body</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">"zxh-topic"</span>, <span class="string">"hello world rocketMQ"</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// send the message</span></span><br><span class="line">        SendResult sendResult = producer.send(message);</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"The info of the send : %s"</span>, sendResult);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sendResult.getSendStatus().equals(SendStatus.SEND_OK)){</span><br><span class="line">            log.info(<span class="string">"message send success，msgId is:"</span>+sendResult.getMsgId());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"message send failed"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>consumer.java</code></p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxh.rocketmq;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: AmberZxh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2021/4/24 10:07 上午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">consumer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instantiate with specified consumer group name</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"zxh-group"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// specify name server address</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"127.0.0.1:9876"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//subscribe one more topics to consume</span></span><br><span class="line">        consumer.subscribe(<span class="string">"zxh-topic"</span>, <span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        consumer.registerMessageListener((MessageListenerConcurrently) (list, consumeConcurrentlyContext) -&gt; {</span><br><span class="line">            MessageExt messageExt = list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = messageExt.getBody();</span><br><span class="line">            System.out.println(<span class="string">"Received message is :"</span>+<span class="keyword">new</span> String(bytes));</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>运行结果</code></p><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210424160449032.png" alt="provider"></p><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210424160457858.png" alt="consumer"></p><h2 id="命令补充"><a href="#命令补充" class="headerlink" title="命令补充"></a>命令补充</h2><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210423213544561.png" alt="命令"></p>]]></content>
      
      
      
        <tags>
            
            <tag> rocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中使用SPI</title>
      <link href="2021/04/19/java-zhong-shi-yong-spi/"/>
      <url>2021/04/19/java-zhong-shi-yong-spi/</url>
      
        <content type="html"><![CDATA[<h1 id="SPI（浅谈使用）"><a href="#SPI（浅谈使用）" class="headerlink" title="SPI（浅谈使用）"></a>SPI（浅谈使用）</h1><span id="more"></span><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="1-1-目录结构"><a href="#1-1-目录结构" class="headerlink" title="1.1 目录结构"></a>1.1 目录结构</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419222403881.png" alt="目录结构"></p><h3 id="2-2-各个文件"><a href="#2-2-各个文件" class="headerlink" title="2.2 各个文件"></a>2.2 各个文件</h3><p><code>Pay.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/19 10:15 下午 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Pay</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>AliPay.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Pay<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/19 10:16 下午 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliPay</span> <span class="token keyword">implements</span> <span class="token class-name">Pay</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this AliPay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>WeChatPay.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Pay<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/19 10:17 下午 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeChatPay</span> <span class="token keyword">implements</span> <span class="token class-name">Pay</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is WeChatPay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Main.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Pay<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ServiceLoader<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/19 10:19 下午 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServiceLoader<span class="token operator">&lt;</span>Pay<span class="token operator">></span> load <span class="token operator">=</span> ServiceLoader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>Pay<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Pay next <span class="token operator">:</span> load<span class="token punctuation">)</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-输出结果"><a href="#2-3-输出结果" class="headerlink" title="2.3 输出结果"></a>2.3 输出结果</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419222551091.png" alt="输出结果"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>粗略地使用，层次还很低，先记录一下吧，我也没有理解透测，以后再更新，哈哈哈哈😂</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapStruct的使用</title>
      <link href="2021/04/19/mapstruct-de-shi-yong/"/>
      <url>2021/04/19/mapstruct-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="超级大坑-mapStruct"><a href="#超级大坑-mapStruct" class="headerlink" title="超级大坑 mapStruct"></a>超级大坑 mapStruct</h1><span id="more"></span><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="1-1-pom-配置（idea-2020"><a href="#1-1-pom-配置（idea-2020" class="headerlink" title="1.1 pom 配置（idea 2020)"></a>1.1 pom 配置（idea 2020)</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--       mapStruct--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>总结： idea 2020 就照我这么用，不然你放心，绝对有bug，让你爽飞天，它会和 <code>lombok</code>冲突。</p><h3 id="2-2-自定义converter"><a href="#2-2-自定义converter" class="headerlink" title="2.2 自定义converter"></a>2.2 自定义converter</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxh.tkmapper.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zxh.tkmapper.dto.AdminDTO;</span><br><span class="line"><span class="keyword">import</span> com.zxh.tkmapper.model.Admin;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mappings;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.factory.Mappers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: AmberZxh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2021/4/19 8:28 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper(componentModel = "spring")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyConverter</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mappings({</span></span><br><span class="line"><span class="meta">            @Mapping(source = "id",target = "id"),</span></span><br><span class="line"><span class="meta">            @Mapping(source = "username",target = "name"),</span></span><br><span class="line"><span class="meta">            @Mapping(source = "password",target = "pwd"),</span></span><br><span class="line"><span class="meta">            @Mapping(source = "addTime",target = "avatar")</span></span><br><span class="line"><span class="meta">    })</span></span><br><span class="line"></span><br><span class="line">    <span class="function">AdminDTO <span class="title">admin2AdminDTO</span><span class="params">(Admin admin)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>照着一摸一样写就行了。没有一个地方是可以省略的</p><h3 id="3-3-测试用例"><a href="#3-3-测试用例" class="headerlink" title="3.3 测试用例"></a>3.3 测试用例</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zxh.tkmapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zxh.tkmapper.converter.MyConverter;</span><br><span class="line"><span class="keyword">import</span> com.zxh.tkmapper.dto.AdminDTO;</span><br><span class="line"><span class="keyword">import</span> com.zxh.tkmapper.mapper.AdminMapper;</span><br><span class="line"><span class="keyword">import</span> com.zxh.tkmapper.model.Admin;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: AmberZxh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2021/4/19 7:53 下午</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AdminMapper adminMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyConverter converter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>{</span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Admin.class);</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andEqualTo(<span class="string">"username"</span>,<span class="string">"admin123"</span>);</span><br><span class="line">        List&lt;Admin&gt; admins = adminMapper.selectByExample(example);</span><br><span class="line">        Admin admin = admins.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        AdminDTO adminDTO = converter.admin2AdminDTO(admin);</span><br><span class="line">        System.out.println(adminDTO);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果（成功）</p><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419220926282.png" alt="运行结果"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>两个字，垃圾。垃圾说的是官方文档垃圾，社区活跃垃圾，性能很好没话说，也挺实用的，但不知道有多少人去用哈。就酱紫。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> MapStruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tkMapper的基本使用</title>
      <link href="2021/04/19/tkmapper-de-ji-ben-shi-yong/"/>
      <url>2021/04/19/tkmapper-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="tkMapper-学习（感觉没啥吊用）"><a href="#tkMapper-学习（感觉没啥吊用）" class="headerlink" title="tkMapper 学习（感觉没啥吊用）"></a>tkMapper 学习（感觉没啥吊用）</h2><span id="more"></span><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="1-1-导入依赖"><a href="#1-1-导入依赖" class="headerlink" title="1.1 导入依赖"></a>1.1 导入依赖</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419200330429.png" alt="依赖"></p><h3 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419200411354.png" alt="配置文件"></p><h3 id="3-3-基本文件"><a href="#3-3-基本文件" class="headerlink" title="3.3 基本文件"></a>3.3 基本文件</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419200456010.png" alt="基本文件"></p><p><code>AdminMapper.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>tkmapper<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>tkmapper<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Admin<span class="token punctuation">;</span><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/19 7:52 下午 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AdminMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Admin<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><code>Admin.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>tkmapper<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Table<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/19 7:54 下午 * @description: */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"cskaoyanmall_admin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token punctuation">{</span>    Integer id<span class="token punctuation">;</span>    String username<span class="token punctuation">;</span>    String password<span class="token punctuation">;</span>    String lastLoginIp<span class="token punctuation">;</span>    String lastLoginTime<span class="token punctuation">;</span>    String avatar<span class="token punctuation">;</span>    Date updateTime<span class="token punctuation">;</span>    Date addTime<span class="token punctuation">;</span>    Boolean deleted<span class="token punctuation">;</span>    String roleIds<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-测试类"><a href="#3-4-测试类" class="headerlink" title="3.4 测试类"></a>3.4 测试类</h3><p><code>MyTest.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>tkmapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>tkmapper<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>AdminMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>tkmapper<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Admin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/19 7:53 下午 * @description: */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mytest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    AdminMapper adminMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Example example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span>Admin<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Example<span class="token punctuation">.</span>Criteria criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        criteria<span class="token punctuation">.</span><span class="token function">andEqualTo</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Admin<span class="token operator">></span> admins <span class="token operator">=</span> adminMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        admins<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-运行截图"><a href="#3-5-运行截图" class="headerlink" title="3.5 运行截图"></a>3.5 运行截图</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419200704687.png" alt="运行截图"></p><h3 id="3-6-注意事项"><a href="#3-6-注意事项" class="headerlink" title="3.6 注意事项"></a>3.6 注意事项</h3><blockquote><p>记得进行全局的包扫描，用的是 <code>tkmapper</code> 包 下的，就这么一点吧</p></blockquote><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419200912158.png" alt="注意事项"></p><h2 id="使用-MybaitsCodeHelper-自动生成-tkMapper"><a href="#使用-MybaitsCodeHelper-自动生成-tkMapper" class="headerlink" title="使用 MybaitsCodeHelper 自动生成 tkMapper"></a>使用 MybaitsCodeHelper 自动生成 tkMapper</h2><h3 id="2-1-自动生成的配置"><a href="#2-1-自动生成的配置" class="headerlink" title="2.1 自动生成的配置"></a>2.1 自动生成的配置</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419201247556.png" alt="自动生成的配置"></p><h3 id="2-3-自动生成结果"><a href="#2-3-自动生成结果" class="headerlink" title="2.3 自动生成结果"></a>2.3 自动生成结果</h3><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419201421825.png" alt="自动生成结果"></p><h3 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h3><blockquote><p>由此可见，此插件是多么的厉害，能自动生成，你还手写？工具人当得还不够多？</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> tkmapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora整合PicoGo</title>
      <link href="2021/04/19/tu-chuang-ce-shi/"/>
      <url>2021/04/19/tu-chuang-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>Typora 使用图床</p><span id="more"></span><h2 id="设置PicGo"><a href="#设置PicGo" class="headerlink" title="设置PicGo"></a>设置PicGo</h2><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419111506617.png" alt="picgo设置"></p><h2 id="设置Typora"><a href="#设置Typora" class="headerlink" title="设置Typora"></a>设置Typora</h2><p><img src="https://zxhblog.oss-cn-hangzhou.aliyuncs.com/img/image-20210419111614904.png" alt="typora设置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="2021/04/19/zookeeper/"/>
      <url>2021/04/19/zookeeper/</url>
      
        <content type="html"><![CDATA[<p>认真整理的zookeeper，</p><span id="more"></span><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><p><img src="/2021/04/19/zookeeper/image-20210223154848739-8797079.png"></p><h2 id="1-ZK简介"><a href="#1-ZK简介" class="headerlink" title="1. ZK简介"></a>1. ZK简介</h2><ul><li>dubbo框架 springcloud 框架      zk  注册中心    AService     BService</li><li>Hadoop Hbase 组件   集群架构   zk  集群管理者 </li><li>zk实现分布式锁  redis分布式</li></ul><blockquote><p>ZooKeeper(动物园管理者) 简称 <strong>ZK</strong>，<strong>一个分布式的，开放源码的分布式应用程序协调服务</strong>，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。ZooKeeper 使用 Java 所编写，但是支持 Java 和 C 两种编程语言。</p></blockquote><hr><h2 id="2-ZK内存数据模型"><a href="#2-ZK内存数据模型" class="headerlink" title="2. ZK内存数据模型"></a>2. ZK内存数据模型</h2><h3 id="2-1-模型结构"><a href="#2-1-模型结构" class="headerlink" title="2.1 模型结构"></a>2.1 模型结构</h3><p><img src="/2021/04/19/zookeeper/image-20210223173257910-8797079.png"></p><h3 id="2-2-模型的特点"><a href="#2-2-模型的特点" class="headerlink" title="2.2 模型的特点"></a>2.2 模型的特点</h3><ul><li>每个子目录如/node1都被称作一个znode(节点)。这个 znode 是被它所在的路径唯一标识</li><li>znode 可以有子节点目录，并且每个 znode 可以存储数据</li><li>znode 是有版本的，每个 znode 中存储的数据可以有多个版本，也就是一个访问路径中可以存储多份数据</li><li>znode 可以被监控，包括这个目录节点中存储的数据的修改，子节点目录的变化等，一旦变化可以通知设置监控的客户端</li></ul><hr><h2 id="3-节点的分类"><a href="#3-节点的分类" class="headerlink" title="3. 节点的分类"></a>3. 节点的分类</h2><h4 id="3-1-持久节点（PERSISTENT）"><a href="#3-1-持久节点（PERSISTENT）" class="headerlink" title="3.1 持久节点（PERSISTENT）"></a>3.1 持久节点（PERSISTENT）</h4><blockquote><p>&nbsp;&nbsp;是指在节点创建后，就一直存在，直到有删除操作来主动删除这个节点——不会因为创建该节点的客户端会话失效而消失</p></blockquote><h4 id="3-2-持久顺序节点（PERSISTENT-SEQUENTIAL）"><a href="#3-2-持久顺序节点（PERSISTENT-SEQUENTIAL）" class="headerlink" title="3.2 持久顺序节点（PERSISTENT_SEQUENTIAL）"></a>3.2 持久顺序节点（PERSISTENT_SEQUENTIAL）</h4><blockquote><p>这类节点的基本特性和上面的节点类型是一致的。额外的特性是，在ZK中，每个父节点会为他的第一级子节点维护一份时序，会记录每个子节点创建的先后顺序。基于这个特性，在创建子节点的时候，可以设置这个属性，那么在创建节点过程中，ZK会自动为给定节点名加上一个数字后缀，作为新的节点名。这个数字后缀的范围是整型的最大值。</p></blockquote><h4 id="3-3-临时节点（EPHEMERAL）"><a href="#3-3-临时节点（EPHEMERAL）" class="headerlink" title="3.3 临时节点（EPHEMERAL）"></a>3.3 临时节点（EPHEMERAL）</h4><blockquote><p>和持久节点不同的是，临时节点的生命周期和客户端会话绑定。也就是说，如果客户端会话失效，那么这个节点就会自动被清除掉。注意，这里提到的是会话失效，而非连接断开。另外，在临时节点下面不能创建子节点。&nbsp;</p></blockquote><h4 id="3-4-临时顺序节点（EPHEMERAL-SEQUENTIAL）"><a href="#3-4-临时顺序节点（EPHEMERAL-SEQUENTIAL）" class="headerlink" title="3.4 临时顺序节点（EPHEMERAL_SEQUENTIAL）"></a>3.4 临时顺序节点（EPHEMERAL_SEQUENTIAL）</h4><blockquote><p>具有临时节点特点,额外的特性是，每个父节点会为他的第一级子节点维护一份时序。这点和刚才提到的持久顺序节点类似</p></blockquote><hr><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4. 安装"></a>4. 安装</h2><h3 id="4-1-linux系统安装"><a href="#4-1-linux系统安装" class="headerlink" title="4.1 linux系统安装"></a>4.1 linux系统安装</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.安装jdk并配置环境变量 &amp; 下载zk安装包</span><span class="token list punctuation">-</span>    https://mirrors.bfsu.edu.cn/apache/zookeeper-3.6.2/apache-zookeeper-3.6.2-bin.tar.gz<span class="token title important"><span class="token punctuation">#</span> 2.下载安装包上传到linux服务中,并解压缩</span><span class="token list punctuation">-</span>    tar -zxvf zookeeper-3.4.12.tar.gz<span class="token title important"><span class="token punctuation">#</span> 3.重命名安装目录</span><span class="token list punctuation">-</span>    mv zookeeper-3.4.12 zk<span class="token title important"><span class="token punctuation">#</span> 4.配置zoo.cfg配置文件</span><span class="token list punctuation">-</span>    1.修改zk的conf目录下的zoo_simple.cfg，修改完后，重命名为zoo.cfg  tickTime=2000  initLimit=10  syncLimit=5  dataDir=/usr/zkdata  clientPort=2181<span class="token title important"><span class="token punctuation">#</span> 5.启动zk</span><span class="token list punctuation">-</span>    在zk的bin目录下，运行zkServer.sh<span class="token code keyword">    ./bin/zkServer.sh start /usr/conf/zoo.cfg</span>    <span class="token title important"><span class="token punctuation">#</span> 6.使用jps查看启动是否成功</span><span class="token title important"><span class="token punctuation">#</span> 7.启动客户端连接到zk</span><span class="token list punctuation">-</span> ./bin/zkCli.sh -server 192.168.0.220:2181<span class="token code keyword">    注意:可以通过&amp;nbsp;&amp;nbsp;./bin/zkCli.sh&amp;nbsp;help&amp;nbsp;查看客户端所有可以执行的指令</span></code></pre><h3 id="4-2-Docker安装zookeeper"><a href="#4-2-Docker安装zookeeper" class="headerlink" title="4.2 Docker安装zookeeper"></a>4.2 Docker安装zookeeper</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.获取zk的镜像</span><span class="token list punctuation">-</span> docker pull zookeeper:3.4.14<span class="token title important"><span class="token punctuation">#</span> 2.启动zk服务</span><span class="token list punctuation">-</span> docker run --name zk -p 2181:2181 -d zookeeper:3.4.14</code></pre><hr><h2 id="5-客户端基本指令"><a href="#5-客户端基本指令" class="headerlink" title="5.客户端基本指令"></a>5.客户端基本指令</h2><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.ls path&amp;nbsp;                               查看特定节点下面的子节点</span><span class="token title important"><span class="token punctuation">#</span> 2.create path data &amp;nbsp;             创建一个节点。并给节点绑定数据(默认是持久性节点)</span>  <span class="token list punctuation">-</span> create path data                                  创建持久节点(默认是持久节点)  <span class="token list punctuation">-</span> create -s path data                           创建持久性顺序节点  <span class="token list punctuation">-</span>    create -e<span class="token entity" title="&nbsp;">&amp;nbsp;</span>path data<span class="token entity" title="&nbsp;">&amp;nbsp;</span>                          创建临时性节点(注意:临时节点不能含有任何子节点)  <span class="token list punctuation">-</span>    create -e -s path<span class="token entity" title="&nbsp;">&amp;nbsp;</span>data            创建临时顺序节点(注意:临时节点不能含有任何子节点) <span class="token title important"><span class="token punctuation">#</span> 3.stat path                查看节点状态</span><span class="token title important"><span class="token punctuation">#</span> 4.set path data            修改节点数据</span><span class="token title important"><span class="token punctuation">#</span> 5.ls2 path                 查看节点下孩子和当前节点的状态</span><span class="token title important"><span class="token punctuation">#</span> 6.history                  查看操作历史</span><span class="token title important"><span class="token punctuation">#</span> 7.get path                 获得节点上绑定的数据信息</span><span class="token title important"><span class="token punctuation">#</span> 8.delete path              删除节点(注意:删除节点不能含有子节点)</span><span class="token title important"><span class="token punctuation">#</span> 9.rmr  path                递归删除节点(注意:会将当前节点下所有节点删除)</span><span class="token title important"><span class="token punctuation">#</span> 10.quit                    退出当前会话(会话失效)</span></code></pre><hr><h2 id="6-节点监听机制-watch"><a href="#6-节点监听机制-watch" class="headerlink" title="6.节点监听机制 watch"></a>6.节点监听机制 watch</h2><blockquote><p>客户端可以监测znode节点的变化。Zonode节点的变化触发相应的事件，然后清除对该节点的监测。当监测一个znode节点时候，Zookeeper会发送通知给监测节点。<strong>一个Watch事件是一个一次性的触发器，当被设置了Watch的数据和目录发生了改变的时候,则服务器将这个改变发送给设置了Watch的客户端以便通知它们。</strong></p></blockquote><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.ls /path true             监听节点目录的变化</span><span class="token title important"><span class="token punctuation">#</span> 2.get /path true                        监听节点数据的变化。   </span></code></pre><h2 id="7-java操作ZK"><a href="#7-java操作ZK" class="headerlink" title="7.java操作ZK"></a>7.java操作ZK</h2><h3 id="7-1-创建项目引入依赖"><a href="#7-1-创建项目引入依赖" class="headerlink" title="7.1 创建项目引入依赖"></a>7.1 创建项目引入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="7-2-获取zk客户端对象"><a href="#7-2-获取zk客户端对象" class="headerlink" title="7.2 获取zk客户端对象"></a>7.2 获取zk客户端对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ZkClient zkClient<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 获取zk客户端连接 */</span><span class="token annotation punctuation">@Before</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Before</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//参数1:服务器的ip和端口</span>    <span class="token comment" spellcheck="true">//参数2:会话的超时时间</span>    <span class="token comment" spellcheck="true">//参数3:回话的连接时间</span>    <span class="token comment" spellcheck="true">//参数4:序列化方式</span>    zkClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span><span class="token string">"192.168.28.132:2181"</span><span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span><span class="token number">60000</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SerializableSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 关闭资源 */</span><span class="token annotation punctuation">@After</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    zkClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="7-3-常用API"><a href="#7-3-常用API" class="headerlink" title="7.3 常用API"></a>7.3 常用API</h3><ul><li>创建节点</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建节点 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCreateNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一中创建方式  返回创建节点的名称</span>    String nodeName <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/node5"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/node6"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/node7"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/node8"</span><span class="token punctuation">,</span><span class="token string">"xiaozhang"</span><span class="token punctuation">,</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第二种创建方式 不会返回创建节点的名称</span>    zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span><span class="token string">"/node1"</span><span class="token punctuation">,</span><span class="token string">"持久数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zkClient<span class="token punctuation">.</span><span class="token function">createPersistentSequential</span><span class="token punctuation">(</span><span class="token string">"/node1/aa"</span><span class="token punctuation">,</span><span class="token string">"持久数据顺序节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zkClient<span class="token punctuation">.</span><span class="token function">createEphemeral</span><span class="token punctuation">(</span><span class="token string">"/node2"</span><span class="token punctuation">,</span><span class="token string">"临时节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zkClient<span class="token punctuation">.</span><span class="token function">createEphemeralSequential</span><span class="token punctuation">(</span><span class="token string">"/node1/bb"</span><span class="token punctuation">,</span><span class="token string">"临时顺序节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>删除节点</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 删除节点 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//删除没有子节点的节点  返回值:是否删除成功</span>    <span class="token keyword">boolean</span> delete <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//递归删除节点信息 返回值:是否删除成功</span>    <span class="token keyword">boolean</span> recursive <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">deleteRecursive</span><span class="token punctuation">(</span><span class="token string">"/node1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>查看节点的子节点</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 查询节点 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取指定路径的节点信息  //返回值: 为当前节点的子节点信息</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> children <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>查看当前节点的数据<ul><li>注意:如果出现:org.I0Itec.zkclient.exception.ZkMarshallingError: java.io.StreamCorruptedException: invalid stream header: 61616161<br>异常的原因是: 在shell中的数据序列化方式 和 java代码中使用的序列化方式不一致导致  因此要解决这个问题只需要保证序列化一致即可  都使用相同端操作即可</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 获取节点的数据 * */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindNodeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object readData <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token string">"/node3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>查看当前节点的数据并获取状态信息</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 获取数据以及当前节点的状态信息 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindNodeDataAndStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Stat stat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object readData <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token string">"/node60000000024"</span><span class="token punctuation">,</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>修改节点数据</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 修改节点数据 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateNodeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    zkClient<span class="token punctuation">.</span><span class="token function">writeData</span><span class="token punctuation">(</span><span class="token string">"/node60000000024"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"121"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>监听节点数据的变化</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 监听节点数据的变化 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testOnNodeDataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span><span class="token string">"/node60000000024"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当节点的值在修改时,会自动调用这个方法  将当前修改节点的名字,和节点变化之后的数据传递给方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span>String nodeName<span class="token punctuation">,</span> Object result<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//当节点的值被删除的时候,会自动调用这个方法,会将节点的名字已参数形式传递给方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span>String nodename<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"节点的名字:"</span><span class="token operator">+</span>nodename<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//阻塞客户端</span>    System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>监听节点目录的变化</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 监听节点的变化 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">testOnNodesChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    zkClient<span class="token punctuation">.</span><span class="token function">subscribeChildChanges</span><span class="token punctuation">(</span><span class="token string">"/node60000000024"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkChildListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//当节点的发生变化时,会自动调用这个方法</span>        <span class="token comment" spellcheck="true">//参数1:父节点名称</span>        <span class="token comment" spellcheck="true">//参数2:父节点中的所有子节点名称</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleChildChange</span><span class="token punctuation">(</span>String nodeName<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父节点名称: "</span><span class="token operator">+</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生变更后字节孩子节点名称:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//阻塞客户端</span>    System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="8-ZK的集群"><a href="#8-ZK的集群" class="headerlink" title="8.ZK的集群"></a>8.ZK的集群</h2><h3 id="8-1集群-cluster"><a href="#8-1集群-cluster" class="headerlink" title="8.1集群(cluster)"></a>8.1集群(cluster)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.集群(cluster)</span><span class="token list punctuation">-</span> 集合同一种软件服务的多个节点同时提供服务<span class="token title important"><span class="token punctuation">#</span> 2.集群解决问题</span><span class="token list punctuation">-</span>  单节点的并发访问的压力问题<span class="token list punctuation">-</span>  单节点故障问题(如硬件老化,自然灾害等)</code></pre><h3 id="8-2集群架构"><a href="#8-2集群架构" class="headerlink" title="8.2集群架构"></a>8.2集群架构</h3><p><img src="/2021/04/19/zookeeper/image-20210223173230650-8797079.png"></p><h3 id="8-3集群搭建"><a href="#8-3集群搭建" class="headerlink" title="8.3集群搭建"></a>8.3集群搭建</h3><pre class=" language-java"><code class="language-java"># <span class="token number">1</span><span class="token punctuation">.</span>创建三个dataDir    <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span>#    mkdir zkdata1 zkdata2 zkdata3# <span class="token number">2</span><span class="token punctuation">.</span>分别在三个dataDir目录下面myid文件    <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span>#<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>touch <span class="token punctuation">.</span>/zkdata1<span class="token operator">/</span>myid    <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> myid的内容是 服务器的<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> 表示<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span># <span class="token number">3</span><span class="token punctuation">.</span>在<span class="token operator">/</span>conf目录下创建三个zk配置文件，分别为 zoo1<span class="token punctuation">.</span>cfg<span class="token punctuation">,</span>zoo2<span class="token punctuation">.</span>cfg<span class="token punctuation">,</span>zoo3<span class="token punctuation">.</span>cfg    <span class="token operator">-</span>    zoo1<span class="token punctuation">.</span>cfg    tickTime<span class="token operator">=</span><span class="token number">2000</span>    initLimit<span class="token operator">=</span><span class="token number">10</span>    syncLimit<span class="token operator">=</span><span class="token number">5</span>    dataDir<span class="token operator">=</span><span class="token operator">/</span>root<span class="token operator">/</span>zkdata1    clientPort<span class="token operator">=</span><span class="token number">3001</span>    server<span class="token number">.1</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">3002</span><span class="token operator">:</span><span class="token number">3003</span>    server<span class="token number">.2</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">4002</span><span class="token operator">:</span><span class="token number">4003</span>    server<span class="token number">.3</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">5002</span><span class="token operator">:</span><span class="token number">5003</span><span class="token operator">-</span> zoo2<span class="token punctuation">.</span>cfg    tickTime<span class="token operator">=</span><span class="token number">2000</span>    initLimit<span class="token operator">=</span><span class="token number">10</span>    syncLimit<span class="token operator">=</span><span class="token number">5</span>    dataDir<span class="token operator">=</span><span class="token operator">/</span>root<span class="token operator">/</span>zkdata2    clientPort<span class="token operator">=</span><span class="token number">4001</span>    server<span class="token number">.1</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">3002</span><span class="token operator">:</span><span class="token number">3003</span>    server<span class="token number">.2</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">4002</span><span class="token operator">:</span><span class="token number">4003</span>    server<span class="token number">.3</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">5002</span><span class="token operator">:</span><span class="token number">5003</span><span class="token operator">-</span> zoo3<span class="token punctuation">.</span>cfg    tickTime<span class="token operator">=</span><span class="token number">2000</span>    initLimit<span class="token operator">=</span><span class="token number">10</span>    syncLimit<span class="token operator">=</span><span class="token number">5</span>    dataDir<span class="token operator">=</span><span class="token operator">/</span>root<span class="token operator">/</span>zkdata3    clientPort<span class="token operator">=</span><span class="token number">5001</span>    server<span class="token number">.1</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">3002</span><span class="token operator">:</span><span class="token number">3003</span>    server<span class="token number">.2</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">4002</span><span class="token operator">:</span><span class="token number">4003</span>    server<span class="token number">.3</span><span class="token operator">=</span><span class="token number">10.15</span><span class="token punctuation">.</span><span class="token number">0.5</span><span class="token operator">:</span><span class="token number">5002</span><span class="token operator">:</span><span class="token number">5003</span>        解释<span class="token operator">:</span>            <span class="token number">1</span><span class="token punctuation">.</span>server<span class="token punctuation">.</span>X <span class="token operator">:</span>x为服务器的唯一标识。            <span class="token number">2.192</span><span class="token punctuation">.</span><span class="token number">168.0</span><span class="token punctuation">.</span><span class="token number">220</span>：服务器所在的ip地址            <span class="token number">3.3002</span>：数据同步使用的端口号            <span class="token number">4.3003</span>：选举使用的端口号# <span class="token number">4</span><span class="token punctuation">.</span>分别启动各个zk服务器<span class="token operator">-</span> <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span># <span class="token punctuation">.</span>/bin<span class="token operator">/</span>zkServer<span class="token punctuation">.</span>sh start <span class="token operator">/</span>usr<span class="token operator">/</span>conf<span class="token operator">/</span>zoo1<span class="token punctuation">.</span>cfg<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">-</span> <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span># <span class="token punctuation">.</span>/bin<span class="token operator">/</span>zkServer<span class="token punctuation">.</span>sh start <span class="token operator">/</span>usr<span class="token operator">/</span>conf<span class="token operator">/</span>zoo2<span class="token punctuation">.</span>cfg<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">-</span> <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span># <span class="token punctuation">.</span>/bin<span class="token operator">/</span>zkServer<span class="token punctuation">.</span>sh start <span class="token operator">/</span>usr<span class="token operator">/</span>conf<span class="token operator">/</span>zoo3<span class="token punctuation">.</span>cfg# <span class="token number">5</span><span class="token punctuation">.</span>查看各个zk服务器的角色信息<span class="token operator">-</span> <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span># <span class="token punctuation">.</span>/bin<span class="token operator">/</span>zkServer<span class="token punctuation">.</span>sh status <span class="token operator">/</span>usr<span class="token operator">/</span>conf<span class="token operator">/</span>zoo1<span class="token punctuation">.</span>cfg# <span class="token number">6</span><span class="token punctuation">.</span>客户端连接任意zk服务器进行节点操作<span class="token operator">-</span> <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span># <span class="token punctuation">.</span>/bin<span class="token operator">/</span>zkCli<span class="token punctuation">.</span>sh <span class="token operator">-</span>server <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.220</span><span class="token operator">:</span><span class="token number">3001</span># <span class="token number">7</span><span class="token punctuation">.</span>停止特定zk服务器<span class="token operator">-</span> <span class="token punctuation">[</span>root<span class="token annotation punctuation">@c60</span> zookeeper<span class="token punctuation">]</span># <span class="token punctuation">.</span>/bin<span class="token operator">/</span>zkServer<span class="token punctuation">.</span>sh stop <span class="token operator">/</span>usr<span class="token operator">/</span>conf<span class="token operator">/</span>zoo1<span class="token punctuation">.</span>cfg<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span></code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo运行demo</title>
      <link href="2021/04/16/dubbo-yun-xing-demo/"/>
      <url>2021/04/16/dubbo-yun-xing-demo/</url>
      
        <content type="html"><![CDATA[<h2 id="写一个dubbo的小demo"><a href="#写一个dubbo的小demo" class="headerlink" title="写一个dubbo的小demo"></a>写一个dubbo的小demo</h2><span id="more"></span><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="/2021/04/16/dubbo-yun-xing-demo/image-20210416212323904.png" alt="image-20210416212323904"></p><p><strong>官网提醒</strong></p><ol><li>该接口需单独打包，在服务提供方和消费方共享 </li><li>对服务消费方隐藏实现 </li><li>也可以使用 IoC 注入 </li></ol><h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><p><img src="/2021/04/16/dubbo-yun-xing-demo/image-20210416214118428.png" alt="image-20210416214118428"></p><h2 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h2><p><img src="/2021/04/16/dubbo-yun-xing-demo/image-20210416214146063.png" alt="image-20210416214146063"></p><p><code>provider.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans              http://www.springframework.org/schema/beans/spring-beans-4.3.xsd                      http://dubbo.apache.org/schema/dubbo                      http://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 提供方应用信息，用于计算依赖关系 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello-world-app<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用multicast广播注册中心暴露服务地址 --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;dubbo:registry address="multicast://224.5.6.7:1234"/>--></span>    <span class="token comment" spellcheck="true">&lt;!-- 用dubbo协议在20880端口暴露服务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20880<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 声明需要暴露的服务接口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zxh.DemoService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token attr-name">registry</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>N/A<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 和本地bean一样实现服务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demoService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zxh.DemoServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><code>DemoServiceImpl.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"你好yeqiang"</span><span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>Provider.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Provider</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"provider.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p><img src="/2021/04/16/dubbo-yun-xing-demo/image-20210416214344563.png" alt="image-20210416214344563"></p><p><code>consumer.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://dubbo.apache.org/schema/dubbo<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>consumer-of-helloworld-app<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;dubbo:registry address="multicast://224.5.6.7:1234"/>--></span>    <span class="token comment" spellcheck="true">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zxh.DemoService<span class="token punctuation">"</span></span>                     <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo://localhost:20880<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><code>Consumer.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"consumer.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DemoService hello <span class="token operator">=</span> <span class="token punctuation">(</span>DemoService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String what <span class="token operator">=</span> hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"what"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="需要的依赖"><a href="#需要的依赖" class="headerlink" title="需要的依赖"></a>需要的依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javassist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.20.0-GA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.jboss.netty/netty --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jboss.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zxh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.32.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><blockquote><p>netty-all这个依赖还是很重要的，需要引入，这个官网上没有说</p></blockquote><blockquote><p>Consumer 和 Provider  这两个模块都需要引入 api 这个包的依赖</p></blockquote><h2 id="Springboot整合Dubbo"><a href="#Springboot整合Dubbo" class="headerlink" title="Springboot整合Dubbo"></a>Springboot整合Dubbo</h2><h3 id="2-1-pom-xml"><a href="#2-1-pom-xml" class="headerlink" title="2.1 pom.xml"></a>2.1 pom.xml</h3><blockquote><p>这两个是最主要的依赖，不要用dubbo 2.7.8，用不了；</p></blockquote><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>其他的和spring 整合一样。</p><h3 id="2-2-provider-xml"><a href="#2-2-provider-xml" class="headerlink" title="2.2 provider.xml"></a>2.2 provider.xml</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">dubbo</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> provider  <span class="token key atrule">protocol</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">20880</span>  <span class="token key atrule">registry</span><span class="token punctuation">:</span>    <span class="token key atrule">address</span><span class="token punctuation">:</span> zookeeper<span class="token punctuation">:</span>//8.136.187.29<span class="token punctuation">:</span><span class="token number">2181</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8099</span></code></pre><p>没什么可说的，就酱紫</p><h2 id="Dubbo-admin-的使用"><a href="#Dubbo-admin-的使用" class="headerlink" title="Dubbo-admin 的使用"></a>Dubbo-admin 的使用</h2><h3 id="3-1-Github-下载-dubbo-admin-会用docker的话，推荐用docker"><a href="#3-1-Github-下载-dubbo-admin-会用docker的话，推荐用docker" class="headerlink" title="3.1 Github 下载 dubbo-admin(会用docker的话，推荐用docker)"></a>3.1 Github 下载 dubbo-admin(会用docker的话，推荐用docker)</h3><blockquote><p>刚下完，导入依赖肯能会话费</p></blockquote><p><img src="/2021/04/16/dubbo-yun-xing-demo/image-20210419100649393.png"></p><h3 id="3-2-配置dubbo-admin-server"><a href="#3-2-配置dubbo-admin-server" class="headerlink" title="3.2 配置dubbo-admin-server"></a>3.2 配置dubbo-admin-server</h3><p><img src="/2021/04/16/dubbo-yun-xing-demo/image-20210419100954460.png"></p><h3 id="3-3-启动dubbo-admin-ui"><a href="#3-3-启动dubbo-admin-ui" class="headerlink" title="3.3  启动dubbo-admin-ui"></a>3.3  启动dubbo-admin-ui</h3><p>  进入到dubbo-admin-ui 的根目录，</p><pre class=" language-sh"><code class="language-sh">#运行npm installnpm run dev</code></pre><h3 id="3-4最终页面展示"><a href="#3-4最终页面展示" class="headerlink" title="3.4最终页面展示"></a>3.4最终页面展示</h3><p><img src="/2021/04/16/dubbo-yun-xing-demo/image-20210419101214278.png"></p><p> 哈哈哈哈哈 ，很好看的，</p>]]></content>
      
      
      
        <tags>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的使用</title>
      <link href="2021/04/16/nginx-de-shi-yong/"/>
      <url>2021/04/16/nginx-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>在linux中使用nginx</p><span id="more"></span><pre class=" language-shell"><code class="language-shell">sudo apt-get install nginx</code></pre><h2 id="apt-get-下载的软件目录在哪里？"><a href="#apt-get-下载的软件目录在哪里？" class="headerlink" title="apt-get 下载的软件目录在哪里？"></a>apt-get 下载的软件目录在哪里？</h2><h4 id="bin目录在-usr-sbin-软件名字-下面"><a href="#bin目录在-usr-sbin-软件名字-下面" class="headerlink" title="bin目录在 /usr/sbin/[软件名字]  下面"></a>bin目录在 /usr/sbin/[软件名字]  下面</h4><h4 id="配置文件在-etc-软件名字-下面"><a href="#配置文件在-etc-软件名字-下面" class="headerlink" title="配置文件在 /etc/[软件名字]   下面"></a>配置文件在 /etc/[软件名字]   下面</h4><h2 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h2><blockquote><p>Worker_processes: 基本都是自己电脑CPU 核个数+1；</p></blockquote><p><img src="/2021/04/16/nginx-de-shi-yong/image-20210416101603702.png" alt="image-20210416101603702"></p><blockquote><p>资源争抢配置</p></blockquote><p><img src="/2021/04/16/nginx-de-shi-yong/image-20210416101930942.png" alt="image-20210416101930942"></p><blockquote><p>直接上注释，哈哈哈哈哈哈哈</p></blockquote><p><img src="/2021/04/16/nginx-de-shi-yong/image-20210416102332546.png" alt="image-20210416102332546"></p><blockquote><p>配置集群（都是要自己加的，在Virtual Host Configs下面添加，你会的哈 zxh，别忘记了哦）</p></blockquote><p><img src="/2021/04/16/nginx-de-shi-yong/image-20210416111849113.png" alt="image-20210416111849113"></p><p>检查配置文件是否正确</p><pre class=" language-shell"><code class="language-shell">sudo nginx -tq</code></pre><p>Reload Nginx</p><pre class=" language-shell"><code class="language-shell">sudo nginx -s reload        </code></pre><blockquote><p>配置缓存</p></blockquote><p><img src="/2021/04/16/nginx-de-shi-yong/image-20210416114200963.png" alt="image-20210416114200963"></p><p>访问本地80端口会出现</p><p><img src="/2021/04/16/nginx-de-shi-yong/image-20210416114240115.png" alt="image-20210416114240115"></p><h2 id="默认负载均衡策略"><a href="#默认负载均衡策略" class="headerlink" title="默认负载均衡策略"></a>默认负载均衡策略</h2><p>轮询策略（默认）</p><p>还可以加权重（看配置文件，就是上图的weight）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring_springboot配置</title>
      <link href="2021/04/06/spring-springboot-pei-zhi/"/>
      <url>2021/04/06/spring-springboot-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>张忘川专用配置！</p><span id="more"></span>    <h2 id="yml基本配置（待补充）"><a href="#yml基本配置（待补充）" class="headerlink" title="yml基本配置（待补充）"></a>yml基本配置（待补充）</h2><p><code>application.yml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8888</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /shiro<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> shiro  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">view</span><span class="token punctuation">:</span>      <span class="token key atrule">prefix</span><span class="token punctuation">:</span> /      <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .jsp    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /res/**  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span>              <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> zxh228..    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/shiro  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">com.zxh.shirotest.mapper</span> <span class="token punctuation">:</span> debug</code></pre><h2 id="JavaConfig（待补充）"><a href="#JavaConfig（待补充）" class="headerlink" title="JavaConfig（待补充）"></a>JavaConfig（待补充）</h2><h3 id="继承WebMvcConfigurer"><a href="#继承WebMvcConfigurer" class="headerlink" title="继承WebMvcConfigurer"></a>继承WebMvcConfigurer</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"file:/usr/local/xuhui/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="如果-springBoot-想要用-jsp-光导入依赖和-webapp-是不够的，还需要配置工作目录"><a href="#如果-springBoot-想要用-jsp-光导入依赖和-webapp-是不够的，还需要配置工作目录" class="headerlink" title="如果 springBoot 想要用 jsp 光导入依赖和 webapp 是不够的，还需要配置工作目录"></a>如果 springBoot 想要用 jsp 光导入依赖和 webapp 是不够的，还需要配置工作目录</h3><h2 id="用到的依赖"><a href="#用到的依赖" class="headerlink" title="用到的依赖"></a>用到的依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--        连接池--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        通用mapper--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--       mapStruct--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--       Dubbo+zookeeper 满配SpringBoot--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        sms--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-java-sdk-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.5.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        oss--></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- 分页插件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  shiro 核心包--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- shiro 缓存 ehcache --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--        hutool工具类，只要是用类型转换--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring_springboot_异常优雅处理and统一返回值</title>
      <link href="2021/04/06/spring-springboot-yi-chang-you-ya-chu-li-and-tong-yi-fan-hui-zhi/"/>
      <url>2021/04/06/spring-springboot-yi-chang-you-ya-chu-li-and-tong-yi-fan-hui-zhi/</url>
      
        <content type="html"><![CDATA[<p>统一返回值和异常处理</p><span id="more"></span><h2 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h2><p><code>ResultEnum.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>spring_exception<span class="token punctuation">.</span>enums<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>omg<span class="token punctuation">.</span>CORBA<span class="token punctuation">.</span>NO_PERMISSION<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/5 9:17 下午 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> ResultEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据操作定义</span>    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">TIME_OUT</span><span class="token punctuation">(</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token string">"访问超时"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NO_PERMISSION</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> <span class="token string">"拒绝访问"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NO_AUTH</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"未经授权访问"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_FOUND</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span> <span class="token string">"无法找到资源"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">METHOD_NOT_ALLOWED</span><span class="token punctuation">(</span><span class="token number">405</span><span class="token punctuation">,</span> <span class="token string">"不支持当前请求方法"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SERVER_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">" 服务器运行异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_PARAM</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_EXIST_USER_OR_ERROR_PASSWORD</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">"该用户不存在或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">NOT_PARAM_USER_OR_ERROR_PASSWORD</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span> <span class="token string">"用户名或密码为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String message<span class="token punctuation">;</span>    <span class="token function">ResultEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><p><code>DifinitionException.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>spring_exception<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/5 9:34 下午 * @description: */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefinitionException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> Integer errorCode<span class="token punctuation">;</span>    <span class="token keyword">protected</span> String  errorMsg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="定义全局异常处理类"><a href="#定义全局异常处理类" class="headerlink" title="定义全局异常处理类"></a>定义全局异常处理类</h2><p><code>GloableExceptionHandler.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>spring_exception<span class="token punctuation">.</span>exception<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>spring_exception<span class="token punctuation">.</span>vo<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ControllerAdvice<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ExceptionHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ResponseBody<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/5 9:46 下午 * @description: */</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>DefinitionException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> Result <span class="token function">myExceptionHandler</span><span class="token punctuation">(</span>DefinitionException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">defineError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="定义统一返回值"><a href="#定义统一返回值" class="headerlink" title="定义统一返回值"></a>定义统一返回值</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>spring_exception<span class="token punctuation">.</span>vo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>spring_exception<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>ResultEnum<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>spring_exception<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>DefinitionException<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/5 9:08 下午 * @description: */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param code    响应码     * @param message 响应信息     */</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param code    响应码     * @param message 响应信息     * @param data    响应数据     */</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">,</span> T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @param resultEnum resultEnum 自定义枚举类，包含 code 和 message     * @param data 数据     */</span>    <span class="token keyword">public</span> <span class="token function">Result</span><span class="token punctuation">(</span>ResultEnum resultEnum<span class="token punctuation">,</span>T data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> resultEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> resultEnum<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     * @param e 自定义异常     * @return 返回result     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Result<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">defineError</span><span class="token punctuation">(</span>DefinitionException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        Result<span class="token operator">&lt;</span>Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getErrorMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac使用redis</title>
      <link href="2021/04/06/mac-shi-yong-redis/"/>
      <url>2021/04/06/mac-shi-yong-redis/</url>
      
        <content type="html"><![CDATA[<p>redis的基本用法，结合homebrew</p><span id="more"></span><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>启动</p><p>➜ redis-server /opt/homebrew/etc/redis.conf</p><p>查看</p><p>➜ redis-cli</p><p>如果出现<code>127.0.0.1:6379&gt;</code> 则成功</p><p>还有一种启动方法就是</p><p>brew services start redis</p><h2 id="关于Home-brew（test）"><a href="#关于Home-brew（test）" class="headerlink" title="关于Home-brew（test）"></a>关于Home-brew（test）</h2><p>使用的指令</p><p>brew docotr</p><p>brew cleanup 清理包</p><p>which -a git 查看所有git路径</p><p>运行brew doctor</p><p>Warning: Unbrewed header files were found in /usr/local/include.<br>If you didn’t put them there on purpose they could cause problems when<br>building Homebrew formulae, and may need to be deleted.</p><p>会有以上的警告</p><p>Stack overflow 上说是没有用homebrew安装node 所有忽略就行了吧</p><p>暂时就这样</p><h2 id="我的redis持久化文件在哪里？"><a href="#我的redis持久化文件在哪里？" class="headerlink" title="我的redis持久化文件在哪里？"></a>我的redis持久化文件在哪里？</h2><p>/opt/homebrew/var/db/redis</p><p>主要是在 opt/homebrew/var 这个文件夹里面</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_springMvc详解</title>
      <link href="2021/04/05/spring-springmvc-xiang-jie/"/>
      <url>2021/04/05/spring-springmvc-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>springMvc的学习总结待完善哦</p><span id="more"></span><h2 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h2><p>随意画的流程图（其实是用错软件了，死🐎当活马医）</p><p><img src="/2021/04/05/spring-springmvc-xiang-jie/springmvc.jpg" alt="springmvc"></p><h2 id="步骤简述"><a href="#步骤简述" class="headerlink" title="步骤简述"></a>步骤简述</h2><ol><li>客户端发送请求到  <code>DispatcherServlet</code> , <code>DispatcherServlet</code>去找 <code>HandlerMapping</code></li><li><code>HandlerMapping</code> 再去找到 <code>Handler</code> ，<code>Handler</code> 找到 url 的执行链，执行链里面都是 <code>HandlerInterceptor</code> ，根据<code>HandlerInterceptor</code> 里面的 preHandler 的返回值判断，如果返回是true 就找到 <code>HandlerAdapter</code>。false 就终止，去寻找下一个。</li><li><code>HandlerAdapter</code> 找到  <code>Handler</code> 进行参数校验，数据处理，最后将处理后的结果打包成 <code>modleAndView</code>  返回给 <code>DispatcherServlet</code> </li><li>这时 <code>DispatcherServlet</code> 解析 <code>modelAndView</code> 最后返回给 View 渲染</li></ol><h2 id="需要掌握的核心"><a href="#需要掌握的核心" class="headerlink" title="需要掌握的核心"></a>需要掌握的核心</h2><p><strong>核心：</strong> HandlerInterceptor</p><ul><li>preHandle</li><li>postHandle</li><li>afterCompletion</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>日志，请求拦截</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>很多基础没有讲，我认为基础没有意义重复论述。</p><p>还需待改进，需要回溯。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro整合springboot</title>
      <link href="2021/04/04/shiro-zheng-he-springboot/"/>
      <url>2021/04/04/shiro-zheng-he-springboot/</url>
      
        <content type="html"><![CDATA[<p>Shiro的基本使用，整合springboot</p><span id="more"></span><h2 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring-boot-web-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="/2021/04/04/shiro-zheng-he-springboot/image-20210406204004697.png" alt="image-20210406204004697"></p><h3 id="简单说说吧"><a href="#简单说说吧" class="headerlink" title="简单说说吧"></a>简单说说吧</h3><ul><li>Filter : 里面基本都是需要过滤一些，权限信息，有哪些资源是公共的，哪些资源是开放的。在未登录之前能访问哪一些资源，默认是，index开头的文件</li><li>Manager : 就是用来管理 Realm 的</li><li>Realm ：算是一个 管理器吧， 它用来对 返回的自定义的 realm 进行设置一些东西，例如，是否开启缓存</li></ul><p>可以用自带的 ehcache ，也可以用自己定义的 redis cache。 也可以设置<code>密码匹配器</code></p><ul><li>自定义的 Realm <ul><li><code>authentication :</code> 校验登录权限</li><li><code>authorization :</code>   授权资源</li></ul></li></ul><h3 id="定义Config"><a href="#定义Config" class="headerlink" title="定义Config"></a>定义Config</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>CustomerRealm<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>credential<span class="token punctuation">.</span>HashedCredentialsMatcher<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>ehcache<span class="token punctuation">.</span>EhCacheManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>Realm<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>ShiroFilterFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>web<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>DefaultWebSecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/4 5:09 下午 * @description: */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 shiroFilter 负责拦截所有请求</span>    <span class="token comment" spellcheck="true">//2 安全管理器</span>    <span class="token comment" spellcheck="true">//3 自定义realm</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"shiroFilterFactoryBean"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">getShiroFilterFactoryBean</span><span class="token punctuation">(</span>DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShiroFilterFactoryBean shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置安全管理器</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置系统的受限资源</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> map  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//anon设置为公共资源</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/register.jsp"</span><span class="token punctuation">,</span><span class="token string">"anon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span> authc 请求这个资源需要认证和授权        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">/</span><span class="token operator">*</span>默认认证界面路径<span class="token punctuation">,</span>这个不写 也行<span class="token punctuation">,</span>因为这个和默认的一摸一样t        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/login.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span>        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置系统的公共资源</span>        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultWebSecurityManager <span class="token function">getDefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customerRealm"</span><span class="token punctuation">)</span> Realm realm<span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultWebSecurityManager defaultWebSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultWebSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultWebSecurityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customerRealm"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Realm <span class="token function">getRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CustomerRealm customerRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 修改凭证校验匹配器</span>        HashedCredentialsMatcher hashedCredentialsMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置加密算法为md5</span>        hashedCredentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">"Md5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置散列次数</span>        hashedCredentialsMatcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>hashedCredentialsMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启缓存管理</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCacheManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启全局的缓存管理</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setCachingEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启认证缓存</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setAuthenticationCachingEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启授权缓存</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setAuthenticationCacheName</span><span class="token punctuation">(</span><span class="token string">"authenticationCache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setAuthorizationCachingEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customerRealm<span class="token punctuation">.</span><span class="token function">setAuthorizationCacheName</span><span class="token punctuation">(</span><span class="token string">"authorizationCache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> customerRealm<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>shiro<span class="token punctuation">;</span><span class="token keyword">import</span> cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>extra<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SpringUtil<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>Perms<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>salt<span class="token punctuation">.</span>MyByteSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>AuthenticationToken<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>SimpleAuthenticationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>AuthorizationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authz<span class="token punctuation">.</span>SimpleAuthorizationInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>realm<span class="token punctuation">.</span>AuthorizingRealm<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>PrincipalCollection<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ObjectUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: AmberZxh * @DateTime: 2021/4/4 5:17 下午 * @description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取主身份信息</span>        String primaryPrincipal <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用授权验证"</span><span class="token operator">+</span>primaryPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据主身份信息获取角色 和 权限信息</span>        UserService userService <span class="token operator">=</span> SpringUtil<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findRolesByUserName</span><span class="token punctuation">(</span>primaryPrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            SimpleAuthorizationInfo simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>role<span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addRole</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>Perms<span class="token operator">></span> perms <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findPermsByRoleId</span><span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>perms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    perms<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>perm <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">addStringPermission</span><span class="token punctuation">(</span>perm<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> SpringUtil<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据用户名查询</span>        String principal <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findByUserName</span><span class="token punctuation">(</span>principal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyByteSource</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getSalt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="验证流程"><a href="#验证流程" class="headerlink" title="验证流程"></a>验证流程</h3><h2 id="过滤器表"><a href="#过滤器表" class="headerlink" title="过滤器表"></a>过滤器表</h2><table><thead><tr><th>配置缩写</th><th>对应的过滤器</th><th align="center">功能</th></tr></thead><tbody><tr><td>验证相关</td><td></td><td align="center"></td></tr><tr><td>anon</td><td>AnonymousFilter</td><td align="center">指定url可以匿名访问</td></tr><tr><td>authc</td><td>FormAuthenticationFilter</td><td align="center">基于表单的拦截器；如“/**=authc”，如果没有登录会跳到相应的登录页面登录；主要属性：usernameParam：表单提交的用户名参数名（ username）； passwordParam：表单提交的密码参数名（password）； rememberMeParam：表单提交的密码参数名（rememberMe）； loginUrl：登录页面地址（/login.jsp）；successUrl：登录成功后的默认重定向地址； failureKeyAttribute：登录失败后错误信息存储key（shiroLoginFailure）</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td align="center">Basic HTTP身份验证拦截器，主要属性： applicationName：弹出登录框显示的信息（application）</td></tr><tr><td>logout</td><td>authc.LogoutFilter</td><td align="center">退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（/）</td></tr><tr><td>user</td><td>UserFilter</td><td align="center">用户拦截器，用户已经身份验证/记住我登录的都可</td></tr><tr><td>授权相关</td><td></td><td align="center"></td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td align="center">角色授权拦截器，验证用户是否拥有所有角色；主要属性： loginUrl：登录页面地址（/login.jsp）；unauthorizedUrl：未授权后重定向的地址；示例“/admin/**=roles[admin]”</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td align="center">权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例“/user/**=perms[“user:create”]”</td></tr><tr><td>port</td><td>PortFilter</td><td align="center">端口拦截器，主要属性：port（80）：可以通过的端口；示例“/test= port[80]”，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径/参数等都一样</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td align="center">rest风格拦截器，自动根据请求方法构建权限字符串（GET=read, POST=create,PUT=update,DELETE=delete,HEAD=read,TRACE=read,OPTIONS=read, MKCOL=create）构建权限字符串；示例“/users=rest[user]”，会自动拼出“user:read,user:create,user:update,user:delete”权限字符串进行权限匹配（所有都得匹配，isPermittedAll）</td></tr><tr><td>ssl</td><td>SslFilter</td><td align="center">SSL拦截器，只有请求协议是https才能通过；否则自动跳转会https端口（443）；其他和port拦截器一样</td></tr><tr><td>noSessionCreation</td><td>NoSessionCreationAuthorizationFilter</td><td align="center">需要指定权限才能访问</td></tr></tbody></table><h2 id="天坑报错信息"><a href="#天坑报错信息" class="headerlink" title="天坑报错信息"></a>天坑报错信息</h2><ol><li><h3 id="springboot整合shiro用户授权java-lang-ClassCastException-org-apache-shiro-subject-SimplePrincipalCollection-cannot-be-cast-to-java-lang-String"><a href="#springboot整合shiro用户授权java-lang-ClassCastException-org-apache-shiro-subject-SimplePrincipalCollection-cannot-be-cast-to-java-lang-String" class="headerlink" title="springboot整合shiro用户授权java.lang.ClassCastException: org.apache.shiro.subject.SimplePrincipalCollection cannot be cast to java.lang.String"></a>springboot整合shiro用户授权java.lang.ClassCastException: org.apache.shiro.subject.SimplePrincipalCollection cannot be cast to java.lang.String</h3></li></ol><p><img src="/2021/04/04/shiro-zheng-he-springboot/image-20210406173458650.png" alt="image-20210406173458650"></p><ol start="2"><li><h3 id="加盐的SimpleSource-没有序列化，需要自己实现并且序列化"><a href="#加盐的SimpleSource-没有序列化，需要自己实现并且序列化" class="headerlink" title="加盐的SimpleSource 没有序列化，需要自己实现并且序列化"></a>加盐的SimpleSource 没有序列化，需要自己实现并且序列化</h3></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zxh<span class="token punctuation">.</span>shirotest<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>salt<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>CodecSupport<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>Hex<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ByteSource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>SimpleByteSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author: zhangxuhui * @date: 2021/4/6 * @description: 解决 SimpleByteSource 无法序列化的问题 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyByteSource</span> <span class="token keyword">implements</span> <span class="token class-name">ByteSource</span><span class="token punctuation">,</span>Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cachedHex<span class="token punctuation">;</span>    <span class="token keyword">private</span> String cachedBase64<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyByteSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyByteSource</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> bytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyByteSource</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> CodecSupport<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyByteSource</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> CodecSupport<span class="token punctuation">.</span><span class="token function">toBytes</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyByteSource</span><span class="token punctuation">(</span>ByteSource source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyByteSource</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyByteSource<span class="token punctuation">.</span>BytesHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyByteSource</span><span class="token punctuation">(</span>InputStream stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyByteSource<span class="token punctuation">.</span>BytesHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isCompatible</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> o <span class="token keyword">instanceof</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">||</span>                o <span class="token keyword">instanceof</span> <span class="token class-name">ByteSource</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">File</span> <span class="token operator">||</span> o <span class="token keyword">instanceof</span> <span class="token class-name">InputStream</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedHex <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cachedHex <span class="token operator">=</span> Hex<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedHex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedBase64 <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cachedBase64 <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedBase64<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bytes <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">ByteSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ByteSource bs <span class="token operator">=</span> <span class="token punctuation">(</span>ByteSource<span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bs<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//will probably be removed in Shiro 2.0.  See SHIRO-203:</span>    <span class="token comment" spellcheck="true">//https://issues.apache.org/jira/browse/SHIRO-203</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">BytesHelper</span> <span class="token keyword">extends</span> <span class="token class-name">CodecSupport</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 嵌套类也需要提供无参构造器         */</span>        <span class="token keyword">private</span> <span class="token function">BytesHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span>File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">toBytes</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getBytes</span><span class="token punctuation">(</span>InputStream stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">toBytes</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯_全排列</title>
      <link href="2021/04/02/hui-su-quan-pai-lie/"/>
      <url>2021/04/02/hui-su-quan-pai-lie/</url>
      
        <content type="html"><![CDATA[<p>超级可爱的回溯算法</p><span id="more"></span><h2 id="回溯模版"><a href="#回溯模版" class="headerlink" title="回溯模版"></a>回溯模版</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Backtrack</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backtracking</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*参数*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*          定义两个成员变量          一个收集满足要求的 结果          一个收集 作为中途尝试的值，进行回退        */</span>        <span class="token comment" spellcheck="true">/*        if (终止条件) {            存放结果            终止本层循环            return;        }        遍历本层集合中的元素        for (选择：本层集合中元素[树中节点孩子的数量就是集合的大小]) {            处理节点;            backtracking(路径，选择列表); // 递归            回溯，撤销处理结果        }        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="/2021/04/02/hui-su-quan-pai-lie/image-20210402215919604.png" alt="image-20210402215919604"></p><p><strong>做题之前，先学习一下多叉树的遍历，然后这里用一个{ 1 , 2 , 3 }的全排列作为Demo</strong></p><h3 id="多叉树遍历模版"><a href="#多叉树遍历模版" class="headerlink" title="多叉树遍历模版"></a>多叉树遍历模版</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 基本的 N 叉树节点 */</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    TreeNode<span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>TreeNode child <span class="token operator">:</span> root<span class="token punctuation">.</span>children<span class="token punctuation">)</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/2021/04/02/hui-su-quan-pai-lie/image-20210403111323718.png" alt="image-20210403111323718"></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Permution1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>path<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>           res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>path<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//        dfs(nums,0,path,res);</span><span class="token comment" spellcheck="true">//        dfs(nums,1,path,res);</span><span class="token comment" spellcheck="true">//        dfs(nums,2,path,res);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> permute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Permution1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permute<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>输出结果</code></p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><p>接下来考虑一种情况，将Demo中冗余代码合并，细节像这样子的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这样会发生什么？</p><p>会增加冗余，例如有：三个 1，1，1 ……</p><p>它会去继续判断新的分支，在return的时候会重复添加 path 到 res 中去</p><p><img src="/2021/04/02/hui-su-quan-pai-lie/image-20210403140632323.png" alt="image-20210403140632323"></p><p>一开始我是很不理解的，为什么条件是 path.size() == nums.length 这里的 size 明明是4 为什么还能进行下去？</p><p>到这里之前不应该是 已经返回了吗？为什么还会走下去？</p><p>带着疑问，我继续研究了一下哈</p><p>原来，在进入第四层的时候，首先进入if判断，在进行 path 的添加，这时候 path.size =4 </p><p>但是在 if 判断的时候， 就会终止条件了，因为它的 path.size = 3 了 ，这时候就会 return </p><p>它根本不能在进行添加。</p><p>bug 就在 if 判断里 ，判断的时候，会 add path 到 res 中，会多执行 3 次，所以冗余了 三个 1， 1， 1</p><blockquote><p>改进</p></blockquote><h3 id="更改后的dfs"><a href="#更改后的dfs" class="headerlink" title="更改后的dfs"></a>更改后的dfs</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>path<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这就是回溯的本质，回溯回溯，就是在当前条件下，</p><p>新增条件，添加到结果集中，去除条件，</p><p>新增另一个条件，添加到结果集中，</p><p>… </p><p>以此类推</p><p>最后，从结果集中选取合适的结果，返回。</p><h3 id="进行剪枝"><a href="#进行剪枝" class="headerlink" title="进行剪枝"></a>进行剪枝</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span>  List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>path<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Permution2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>  path<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span>  List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>path<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> permute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Permution2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permute<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>深入理解多叉树的遍历</li><li>知道自己要干什么，对照模版就ok了</li><li>没啥难度，确实</li><li>回溯—&gt;贪心—&gt;动态规划</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 回溯算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的基本使用</title>
      <link href="2021/04/02/hexo-de-ji-ben-shi-yong/"/>
      <url>2021/04/02/hexo-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>hexo的基本使用，和遇到的大坑</p><span id="more"></span><h2 id="建立文章"><a href="#建立文章" class="headerlink" title="建立文章"></a>建立文章</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">新建文章</span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"文章文字"</span>(简写 hexo n)</span><br><span class="line">新建页面</span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"页面名字"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文章里插入图片"><a href="#文章里插入图片" class="headerlink" title="文章里插入图片"></a>文章里插入图片</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">{% asset_img 图片文件名字 %}</span><br></pre></td></tr></tbody></table></figure><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 回溯算法_全排列</span><br><span class="line">date: <span class="number">2021</span>-<span class="number">04</span>-<span class="number">01</span> <span class="number">21</span>:<span class="number">10</span>:<span class="number">14</span></span><br><span class="line">tags:</span><br><span class="line">- 算法</span><br><span class="line">- leetcode</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">我是短小精悍的文章摘要(๑•̀ㅂ•́)و✧</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="部署命令"><a href="#部署命令" class="headerlink" title="部署命令"></a>部署命令</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">清空缓存 </span><br><span class="line">hexo clean </span><br><span class="line">生成静态页面至<span class="keyword">public</span>目录 </span><br><span class="line"><span class="function">hexo <span class="title">generate</span> <span class="params">(简写 hexo g)</span></span></span><br><span class="line"><span class="function">项目部署</span></span><br><span class="line"><span class="function">hexo <span class="title">deploy</span> <span class="params">(简写 hexo d)</span></span></span><br></pre></td></tr></tbody></table></figure><p>以上是部署必须要的步骤</p><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">开启预览访问端口（默认端口<span class="number">4000</span>，ctrl+c 关闭server）</span><br><span class="line"><span class="function">hexo <span class="title">server</span> <span class="params">(简写 hexo s)</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="git提交"><a href="#git提交" class="headerlink" title="git提交"></a>git提交</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">git checkout master # 切换到master分支</span><br><span class="line"></span><br><span class="line">git add . #我不知道啥意思</span><br><span class="line"></span><br><span class="line">git commit -am"${提交的信息}" #照着写就行啦</span><br><span class="line"></span><br><span class="line">git push # 提交</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><p>使用 <code>hexo-prism-plugin</code>的时候，需要依赖<code>hexo-inject</code></p><h3 id="遇到的超级大坑css样式加载不出来"><a href="#遇到的超级大坑css样式加载不出来" class="headerlink" title="遇到的超级大坑css样式加载不出来"></a>遇到的超级大坑css样式加载不出来</h3><figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">解决办法</span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><br><span class="line">url: https:<span class="comment">//amberzxh.github.io/</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks</span><br><span class="line">  trailing_html: true # Set to false to remove trailing '.html' from permalinks</span><br></pre></td></tr></tbody></table></figure><p>要将这里的root改为 /，一定要改为/，对我自己来说！！！</p><h4 id="另外说明一下master-和-gh-pages这两个分支"><a href="#另外说明一下master-和-gh-pages这两个分支" class="headerlink" title="另外说明一下master 和 gh-pages这两个分支"></a>另外说明一下master 和 gh-pages这两个分支</h4><p> master 分支是作为备份使用的，而 gh-pages 是真正hexo的部署网页</p><p>每次提交只需要执行</p><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git add .</span><br><span class="line">git commit am"${提交信息}" #这里msg一定要填写，不然不能提交</span><br><span class="line">git push</span><br></pre></td></tr></tbody></table></figure><p>原因：我配置了travis-ci 只要提交master，它会帮助我们自动部署gh-pages</p><p>所以只需要提交 master 分支就行了</p><p>连根目录下的_config.xml里面的repo 也可以注释掉了</p><img src="/2021/04/02/hexo-de-ji-ben-shi-yong/2021-04-02-02-06.jpg" class=""><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>Hexo 写的博客里没有H1 ，自动生成目录根据H2来计算的。</p><h3 id="Hero-整合typora"><a href="#Hero-整合typora" class="headerlink" title="Hero 整合typora"></a>Hero 整合typora</h3><h5 id="设置-gt-图像"><a href="#设置-gt-图像" class="headerlink" title="设置->图像"></a>设置-&gt;图像</h5><p><img src="/2021/04/02/hexo-de-ji-ben-shi-yong/image-20210402134846170.png" alt="image-20210402134846170"></p><h5 id="结束后替换"><a href="#结束后替换" class="headerlink" title="结束后替换"></a>结束后替换</h5><p>将 “文章名/” —-&gt;全部替换为空 “ ”</p><p>注意 一定是要 “文章名“ + ”/“</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法_全排列</title>
      <link href="2021/04/01/hui-su-suan-fa-quan-pai-lie/"/>
      <url>2021/04/01/hui-su-suan-fa-quan-pai-lie/</url>
      
        <content type="html"><![CDATA[<p>我是短小精悍的文章摘要(๑•̀ㅂ•́)و✧</p><span id="more"></span><img src="/2021/04/01/hui-su-suan-fa-quan-pai-lie/example.jpg" class=""><h1 id="title1-0"><a href="#title1-0" class="headerlink" title="title1.0"></a>title1.0</h1><h2 id="title1-1"><a href="#title1-1" class="headerlink" title="title1.1"></a>title1.1</h2><h1 id="title2-0"><a href="#title2-0" class="headerlink" title="title2.0"></a>title2.0</h1><h2 id="title2-1"><a href="#title2-1" class="headerlink" title="title2.1"></a>title2.1</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>temp<span class="token punctuation">)</span><span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> target<span class="token operator">></span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>left<span class="token punctuation">;</span>                ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>right<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> ret<span class="token punctuation">;</span>                        </code></pre><img src="/2021/04/01/hui-su-suan-fa-quan-pai-lie/2021-04-01-22-09.jpg" class=""><p><img src="/2021/04/01/hui-su-suan-fa-quan-pai-lie/image-20210402133240045.png" alt="image-20210402133240045"></p><p><img src="/2021/04/01/hui-su-suan-fa-quan-pai-lie/image-20210402134428652.png" alt="image-20210402134428652"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
